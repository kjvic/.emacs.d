#+TITLE: Krista Victorsen's Emacs configuration
#+AUTHOR: Krista Victorsen
#+PROPERTY: header-args :tangle yes
* Table of Contents                                                     :TOC:
- [[#bootstrap][Bootstrap]]
  - [[#load-path][Load-path]]
  - [[#special-files-gtdagenda-media-etc][Special files: gtd/agenda, media etc.]]
  - [[#profiling-uncomment-this][Profiling? Uncomment this]]
  - [[#use-package-package-management-management][use-package: package management management]]
  - [[#tangling-helpers--literate-programming-support][Tangling helpers / Literate programming support]]
- [[#tangle-external-files][Tangle external files]]
  - [[#os-specific-config][OS-specific config]]
  - [[#better-defaults][Better defaults]]
  - [[#global-settings][Global settings]]
  - [[#gcal][Gcal]]
  - [[#ivy][Ivy]]
  - [[#magit][Magit]]
  - [[#org-mode][Org-mode]]
  - [[#company][Company]]
  - [[#tramp][Tramp]]
  - [[#modeline][Modeline]]
  - [[#programming-support][Programming support]]
  - [[#minor-packages][Minor packages]]
  - [[#latex][LaTeX]]
- [[#tron-doom-theme][Tron doom theme]]
- [[#getting-help][Getting help]]
  - [[#how-tos][How-to's]]
  - [[#troubleshooting-your-config-file][Troubleshooting your config file]]
  - [[#helpful-resources][Helpful resources]]
- [[#further-plans][Further plans]]
  - [[#add-submodules-for-repos-that-are-not-on-melpa][Add submodules for repos that are not on MELPA]]
  - [[#gtd-goals][Gtd goals]]
  - [[#improvements-to-org-mode][Improvements to org mode]]
  - [[#kinesis-specific-keyboard-issues][Kinesis-specific keyboard issues]]
  - [[#integrated-compiler--version-control--logging-facility][Integrated compiler / version control / logging facility]]
  - [[#set-up-steam-integration-with-emacs][Set up steam integration with emacs]]
  - [[#spotify-controls-in-emacs][spotify controls in emacs]]
  - [[#install--configure-hackernews-mode][install & configure hackernews mode]]
  - [[#emacsw3][Emacs/W3]]
  - [[#multiple-cursors][multiple-cursors]]
  - [[#add-more-to-yasnippet][Add more to yasnippet]]
  - [[#install-the-alert-package][Install the alert package]]
  - [[#install-winner-windmove][Install winner, windmove]]

* Bootstrap
Get emacs off the ground!
** Load-path
#+BEGIN_SRC emacs-lisp
(message "[krista] Setting load path")
(add-to-list 'load-path "~/.emacs.d/elisp/")
(add-to-list 'load-path (concat user-emacs-directory "literate/tron-doom/"))
#+END_SRC
** Special files: gtd/agenda, media etc.
#+BEGIN_SRC emacs-lisp
(setq krista/orgzly-dir "~/Dropbox/orgzly/")

(setq krista/gcal-file (concat krista/orgzly-dir "gcal.org"))

;; GTD files
(setq krista/inbox-file (concat krista/orgzly-dir "[gtd]-inbox.org"))
(setq krista/todo-file  (concat krista/orgzly-dir "[gtd]-todo.org"))
(setq krista/projects-file (concat krista/orgzly-dir "[gtd]-projects.org"))
(setq krista/inactive-projects-file (concat krista/orgzly-dir "[gtd]-inactive-projects.org"))
(setq krista/waiting-file (concat krista/orgzly-dir "[gtd]-waiting.org"))
(setq krista/tickler-file (concat krista/orgzly-dir "[gtd]-tickler.org"))
(setq krista/someday-maybe-file (concat krista/orgzly-dir "[gtd]-someday-maybe.org"))

(setq krista/habits-file "~/core/lists/habits.org")
(setq krista/annoy-file (concat krista/orgzly-dir "annoy.org"))
(setq krista/random-ideas-file (concat krista/orgzly-dir "random-ideas.org"))

;; Media files
(setq krista/books-file (concat krista/orgzly-dir "[media]-books.org"))
(setq krista/movies-file (concat krista/orgzly-dir "[media]-movies.org"))
(setq krista/music-file (concat krista/orgzly-dir "[media]-music.org"))
(setq krista/reading-file (concat krista/orgzly-dir "[media]-reading.org"))
(setq krista/tv-file (concat krista/orgzly-dir "[media]-tv.org"))
(setq krista/video-games-file (concat krista/orgzly-dir "[media]-video-games.org"))
(setq krista/media-files
      `(,krista/books-file 
        ,krista/movies-file
        ,krista/music-file
        ,krista/reading-file
        ,krista/tv-file
        ,krista/video-games-file))
(setq krista/shopping-file (concat krista/orgzly-dir "shopping.org"))

(bind-key "H-t" '(lambda () (interactive) (find-file krista/todo-file)))
(bind-key "H-p" '(lambda () (interactive) (find-file krista/projects-file)))
(bind-key "H-P" '(lambda () (interactive) (find-file krista/inactive-projects-file)))
(bind-key "H-T" '(lambda () (interactive) (find-file krista/tickler-file)))
(bind-key "H-i" '(lambda () (interactive) (find-file krista/inbox-file)))
(bind-key "H-a" '(lambda () (interactive) (find-file krista/annoy-file)))
(bind-key "H-w" '(lambda () (interactive) (find-file krista/waiting-file)))
(bind-key "H-?" '(lambda () (interactive) (find-file krista/someday-maybe-file)))
(bind-key "H-g" '(lambda () (interactive) (find-file krista/gcal-file)))
(bind-key "H-h" '(lambda () (interactive) (find-file krista/habits-file)))
#+END_SRC
** Profiling? Uncomment this
- To profile accurately, I need to reload all of my packages
  - Source: https://sriramkswamy.github.io/dotemacs/
- To do this, I need to uncomment this block of code:
#+BEGIN_SRC emacs-lisp
;; (require 'package)
;; (package-initialize)
#+END_SRC
** use-package: package management management
[[https://github.com/jwiegley/use-package][use-package github]]
#+BEGIN_SRC emacs-lisp
(message "[krista] use-package setup")
(unless (package-installed-p 'use-package)
  ;; Update the package if it needs updating.
  ;; NOTE: This contacts melpa every time you reload your config. Overhead!
  ;; (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
;; All packages in a use-package macro should be automagically installed
(setq use-package-always-ensure t)
#+END_SRC
** Tangling helpers / Literate programming support
- NOTE: you /must/ have each tangle block on a new line in order for it
  to be tangled correctly!!!!
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
#+BEGIN_SRC emacs-lisp
(message "[krista] Defining helper macros for tangling")
(setq-default krista/org-config-directory "literate")
(setq-default krista/org-config-dirpath
              (expand-file-name (concat user-emacs-directory
                                        krista/org-config-directory)))
(add-to-list 'load-path krista/org-config-dirpath)
(setq-default krista/config-org-files nil)

;; transforms the given name to "krista/name-config-file" and sets it
;; to the given org filename
(defmacro krista/new-config-file (name filename)
  (let ((full-file (make-symbol "full-filename")))
    `(let ((,full-file
            (concat (file-name-as-directory krista/org-config-dirpath)  ,filename ".org")))
       (defvar ,(intern (concat "krista/" (symbol-name name) "-config-file"))
         ,full-file)
       (add-to-list
        (quote krista/config-org-files) (quote (,name . ,filename)) t))))
#+END_SRC
* Tangle external files
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
** OS-specific config
#+BEGIN_SRC emacs-lisp
(message "[krista] OS-specific config")
(krista/new-config-file macOS "macOS")
(krista/new-config-file windows "windows")
(cond ((eq system-type 'darwin)
       (org-babel-load-file krista/macOS-config-file))
      ((member system-type '(ms-dos windows-nt cygwin))
       (org-babel-load-file krista/windows-config-file)))
#+END_SRC
** Better defaults
#+BEGIN_SRC emacs-lisp
(krista/new-config-file better-defaults "better-defaults")
(org-babel-load-file krista/better-defaults-config-file)
#+END_SRC
** Global settings
#+BEGIN_SRC emacs-lisp
(krista/new-config-file global-settings "global-settings")
(org-babel-load-file krista/global-settings-config-file)
#+END_SRC
** Gcal
#+BEGIN_SRC emacs-lisp
(krista/new-config-file gcal-secrets "gcal-secrets")
(org-babel-load-file krista/gcal-secrets-config-file)
#+END_SRC
** Ivy
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-ivy "krista-ivy")
(org-babel-load-file krista/krista-ivy-config-file)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-magit "krista-magit")
(org-babel-load-file krista/krista-magit-config-file)
#+END_SRC
** Org-mode
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-org-mode "krista-org-mode")
(org-babel-load-file krista/krista-org-mode-config-file)
#+END_SRC
** Company
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-company "krista-company")
(org-babel-load-file krista/krista-company-config-file)
#+END_SRC
** Tramp
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-tramp "krista-tramp")
(org-babel-load-file krista/krista-tramp-config-file)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
(krista/new-config-file modeline "modeline")
(org-babel-load-file krista/modeline-config-file)
#+END_SRC
** Programming support
#+BEGIN_SRC emacs-lisp
(krista/new-config-file programming-support "programming-support")
(org-babel-load-file krista/programming-support-config-file)
#+END_SRC
** Minor packages
#+BEGIN_SRC emacs-lisp
(krista/new-config-file minor-packages "minor-packages")
(org-babel-load-file krista/minor-packages-config-file)
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp
(krista/new-config-file krista-latex "krista-latex")
(org-babel-load-file krista/krista-latex-config-file)
#+END_SRC
* Tron doom theme
#+BEGIN_SRC emacs-lisp
;; Load my theme
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "literate/tron-doom/"))
(load-theme 'tron-doom t) ; t for "don't ask me to load this theme"

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Enable flashing mode-line on errors
;; (doom-themes-visual-bell-config)
#+END_SRC
* Getting help
This section is not part of my config file per say, but contains instructions
for getting help with various parts of emacs
** How-to's
*** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html][Keybinding instructions]]
*** How to edit source code in org-mode file
- New code block:
  - New source block (lang unspecified): <s [TAB]
  - New elisp block: <el [TAB]
- Edit code block: C-c'
*** Embed an image in an org document
#+BEGIN_EXAMPLE
,#+CAPTION: This is the caption for the next figure link (or table)
,#+attr_org: :width="50px"
,#+NAME:   figure
[[file:./my_image.png]]
#+END_EXAMPLE
*** Select all: C-x h
*** Moving a file into the 'literate' directory:
Suppose you made a file called =new-thing=
#+BEGIN_EXAMPLE 
;; Macro to define a new external tangling file:
(krista/new-config-file new-thing "new-thing")
;; Actually load the external file:
'(org-babel-load-file krista/my-new-config-file)
#+END_EXAMPLE
** Troubleshooting your config file
If you don't know why your emacs is breaking, but suspect a tangling
issue, then CHECK CONFIG.EL
** Helpful resources
*** Within emacs
- =M-x describe-[key, face, mode, etc.]=
  - =C-h [k, o, f, m]=: Quick keybindings for the describe-.* functions
- Custom help written by me: [[*Cheatsheet]]
*** Online
- http://pages.sachachua.com/.emacs.d/Sacha.html
- http://ergoemacs.org/emacs/emacs.html
- https://emacsdojo.github.io/
* Further plans
** Add submodules for repos that are not on MELPA
*** https://github.com/novoid/title-capitalization.el
** TODO Gtd goals
https://github.com/jethrokuan/.emacs.d/blob/master/config.org#org-mode-for-gtd
** Improvements to org mode
*** TODO meta: check out melpa packages for "org-$PACKAGENAME"
*** TODO org gcal
https://github.com/myuhe/org-gcal.el
*** TODO org dotemacs
Summary: Store your emacs config as an org file, and choose which bits to load.
Requires: org-7.9.3, cl-lib-1.0
Homepage: https://github.com/vapniks/org-dotemacs
*** TODO better priorities
Summary: Display org priorities as custom strings
Homepage: https://github.com/harrybournis/org-fancy-priorities
*** TODO org context
**** package option: org-context
https://github.com/thisirs/org-context
**** package option: org-category-capture
https://github.com/IvanMalison/org-projectile
This package provides an interface that can be used to capture TODOs with a
category that is selected depending on a some piece of Emacs context.
*** TODO org doing
org-doing
Summary: Keep track of what you're doing
Homepage: https://github.com/omouse/org-doing
*** TODO org redmine
Summary: Redmine tools using Emacs OrgMode
Homepage: https://github.com/gongo/org-redmine
** TODO Kinesis-specific keyboard issues
- My hands were hurting after long typing sessions. As a computer
  science student, I forsaw this as being a potentially-huge problem
  later on in life. So I decided to get a Kinesis Advantage 2 while I
  was still young, springy, and stupid enough to consider adapting my
  muscle memory to a new keyboard style. (...but fuck Dvorak. I ain't
  crazy enough for Dvorak.) 2 weeks later, my new Kinesis arrived. I
  plugged her into my Mac, and with a perverse glee, I started up
  Emacs to see what was broken. Here, I shall document those things.
- First, I live in the U.S. This keyboard therefore shipped with a
  P.C. layout. I followed the instructions for "Mac Mode", as per
  the quickstart guide. It should be noted that before switching, my
  layout was modified from the stock OS X layout as follows:
- Global modifications:
** TODO Integrated compiler / version control / logging facility
- I've noticed that when coding in a compiled language such as C/C++,
  I often end up in this workflow:
  - Type some stuff
  - Save
  - Try compiling
  - If compiler errors
    - Make note of what's wrong
    - Try to solve the problem
    - Try compiling again
- It would be nice to be able to record the flow of [compiler error /
  troubleshooting idea / fix] for the purposes of version control
- I want a package that will let me have a debugging diary which will
  archive my code, compiler output, and any thoughts that i'd like to
  record.
- Ideally, the package would output an org doc with an undo-tree -like
  interface for retracing my steps in debugging
** TODO Set up steam integration with emacs
** TODO spotify controls in emacs
** TODO install & configure hackernews mode
** TODO Emacs/W3
#+BEGIN_SRC emacs-lisp
;; (setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
;; (condition-case () (require 'w3-auto "w3-auto") (error nil))
#+END_SRC
** TODO multiple-cursors
#+BEGIN_SRC emacs-lisp
;; (use-package multiple-cursors
;;  :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+END_SRC
** TODO Add more to yasnippet
** TODO Install the alert package
- provides Growl-like notifications
- would be useful for org-calendar
** TODO Install winner, windmove
See https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
