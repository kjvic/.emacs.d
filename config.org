#+TITLE: Krista Victorsen's Emacs configuration
#+AUTHOR: Krista Victorsen
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2
* Bootstrap
Get emacs off the ground!
** Load-path
*** Config
#+BEGIN_SRC emacs-lisp
(message "[krista] Setting load path")
(add-to-list 'load-path "~/.emacs.d/elisp/")
(add-to-list 'load-path (concat user-emacs-directory "literate/tron-doom/"))
#+END_SRC
** Profiling? Set `:tangle yes` below
To profile accurately, I need to reload all of my packages. I don't
normallly want to waste time like that, so I set :tangle no
https://sriramkswamy.github.io/dotemacs/
#+BEGIN_SRC emacs-lisp :tangle no
(require 'package)
(package-initialize)
#+END_SRC
** use-package: package management management
[[https://github.com/jwiegley/use-package][use-package github]]
#+BEGIN_SRC emacs-lisp
(message "[krista] use-package setup")
(unless (package-installed-p 'use-package)
  ;; Update the package if it needs updating.
  ;; NOTE: This contacts melpa every time you reload your config. Overhead!
  ;; (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
;; All packages in a use-package macro should be automagically installed
(setq use-package-always-ensure t)
#+END_SRC
** Literate programming support
- NOTE: you /must/ have each tangle block on a new line in order for it
  to be tangled correctly!!!!
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
*** Tangling helpers
#+BEGIN_SRC emacs-lisp
(message "[krista] Defining helper macros for tangling")
(setq-default krista/org-config-directory "literate")
(setq-default krista/org-config-dirpath
              (expand-file-name (concat user-emacs-directory
                                        krista/org-config-directory)))
(add-to-list 'load-path krista/org-config-dirpath)
(setq-default krista/config-org-files nil)

;; transforms the given name to "krista/name-config-file" and sets it
;; to the given org filename
(defmacro krista/new-config-file (name filename)
  (let ((full-file (make-symbol "full-filename")))
    `(let ((,full-file
            (concat (file-name-as-directory krista/org-config-dirpath)  ,filename ".org")))
       (defvar ,(intern (concat "krista/" (symbol-name name) "-config-file"))
         ,full-file)
       (add-to-list
        (quote krista/config-org-files) (quote (,name . ,filename)) t))))
#+END_SRC
*** Now actually tangle the external files
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
**** OS-specific config
#+BEGIN_SRC emacs-lisp
(message "[krista] OS-specific config")
(krista/new-config-file macOS "macOS")
(krista/new-config-file windows "windows")
(cond ((eq system-type 'darwin)
       (org-babel-load-file krista/macOS-config-file))
      ((member system-type '(ms-dos windows-nt cygwin))
       (org-babel-load-file krista/windows-config-file)))
#+END_SRC
**** Modeline
#+BEGIN_SRC emacs-lisp
(krista/new-config-file modeline "modeline")
(org-babel-load-file krista/modeline-config-file)
#+END_SRC
**** Gcal
#+BEGIN_SRC emacs-lisp
(krista/new-config-file gcal-secrets "gcal-secrets")
(org-babel-load-file krista/gcal-secrets-config-file)
#+END_SRC
**** LaTeX
#+BEGIN_SRC emacs-lisp
(krista/new-config-file latex-config "latex-config")
;; (org-babel-load-file krista/latex-config-file)
#+END_SRC
** Special Files: GTD, media, orgzly, etc.
#+BEGIN_SRC emacs-lisp
(setq krista/orgzly-dir "~/Dropbox/orgzly/")

(setq krista/gcal-file (concat krista/orgzly-dir "gcal.org"))

;; GTD files
(setq krista/inbox-file (concat krista/orgzly-dir "[gtd]-inbox.org"))
(setq krista/todo-file  (concat krista/orgzly-dir "[gtd]-todo.org"))
(setq krista/projects-file (concat krista/orgzly-dir "[gtd]-projects.org"))
(setq krista/inactive-projects-file (concat krista/orgzly-dir "[gtd]-inactive-projects.org"))
(setq krista/waiting-file (concat krista/orgzly-dir "[gtd]-waiting.org"))
(setq krista/tickler-file (concat krista/orgzly-dir "[gtd]-tickler.org"))
(setq krista/someday-maybe-file (concat krista/orgzly-dir "[gtd]-someday-maybe.org"))

(setq krista/habits-file "~/core/lists/habits.org")
(setq krista/annoy-file (concat krista/orgzly-dir "annoy.org"))
(setq krista/random-ideas-file (concat krista/orgzly-dir "random-ideas.org"))

;; Media files
(setq krista/books-file (concat krista/orgzly-dir "[media]-books.org"))
(setq krista/movies-file (concat krista/orgzly-dir "[media]-movies.org"))
(setq krista/music-file (concat krista/orgzly-dir "[media]-music.org"))
(setq krista/reading-file (concat krista/orgzly-dir "[media]-reading.org"))
(setq krista/tv-file (concat krista/orgzly-dir "[media]-tv.org"))
(setq krista/video-games-file (concat krista/orgzly-dir "[media]-video-games.org"))
(setq krista/media-files
      `(,krista/books-file 
        ,krista/movies-file
        ,krista/music-file
        ,krista/reading-file
        ,krista/tv-file
        ,krista/video-games-file))
(setq krista/shopping-file (concat krista/orgzly-dir "shopping.org"))

(bind-key "H-t" '(lambda () (interactive) (find-file krista/todo-file)))
(bind-key "H-p" '(lambda () (interactive) (find-file krista/projects-file)))
(bind-key "H-P" '(lambda () (interactive) (find-file krista/inactive-projects-file)))
(bind-key "H-T" '(lambda () (interactive) (find-file krista/tickler-file)))
(bind-key "H-i" '(lambda () (interactive) (find-file krista/inbox-file)))
(bind-key "H-a" '(lambda () (interactive) (find-file krista/annoy-file)))
(bind-key "H-w" '(lambda () (interactive) (find-file krista/waiting-file)))
(bind-key "H-?" '(lambda () (interactive) (find-file krista/someday-maybe-file)))
(bind-key "H-g" '(lambda () (interactive) (find-file krista/gcal-file)))
(bind-key "H-h" '(lambda () (interactive) (find-file krista/habits-file)))
#+END_SRC
** Show org agenda at startup
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t
        inhibit-startup-message t
        initial-major-mode 'fundamental-mode
        inhibit-splash-screen t)
  (add-hook 'emacs-startup-hook
            (lambda ()
              ;; GTD review
              (org-agenda nil "r")
              (delete-other-windows)))
  #+END_SRC
** +Byte-compile+
   #+BEGIN_SRC emacs-lisp
   ;; (defun diego/async-tangle-init ()
   ;;   (async-start
   ;;    (lambda ()
   ;;      ;; make async emacs aware of packages (for byte-compilation)
   ;;      (package-initialize)
   ;;      (setq package-enable-at-startup nil)
   ;;      (require 'org)

   ;;      ;; tangle
   ;;      (org-babel-tangle-file
   ;;       (expand-file-name (concat user-emacs-directory "config.org"))
   ;;       (expand-file-name (concat user-emacs-directory "config.el")) 
   ;;       "emacs-lisp")

   ;;      ;; these guys were producing errors at byte-compilation, requiring them fixed this
   ;;      ;; (require 'crux)
   ;;      ;; (require 'fringe-helper)

   ;;      ;; byte-compile
   ;;      (byte-compile-file
   ;;       (expand-file-name  (concat user-emacs-directory "config.el"))))
   ;;    'ignore))
   #+END_SRC
* Tools for configuring emacs
This is where I put things that help me modify my emacs install more efficiently
** Quickly open, evaluate my config file
#+BEGIN_SRC emacs-lisp
(defun krista/speedy-open-config ()
  "Quickly open my config file"
  (interactive)
  (find-file (or "~/.emacs.d/config.org"
                 user-init-file "")))
(bind-key "C-c e" #'krista/speedy-open-config)

(defun krista/speedy-eval-config ()
  "Quickly evaluate my config file"
  (interactive)
  (load-file user-init-file)
  ;; Restart org mode
  (org-mode-restart)
  ;; Update modeline
  (force-mode-line-update t))
(bind-key "C-c C-h" #'krista/speedy-eval-config)
#+END_SRC
** Evaluate a region, or the buffer (whatever's appropriate)
#+BEGIN_SRC emacs-lisp
(defun eval-region-or-buffer ()
  "Let me eval either a region or a buffer at a time"
  (interactive)
  (let ((debug-on-error t))
    (cond
     (mark-active
      (call-interactively 'eval-region)
      (message "Region evaluated!")
      (setq deactivate-mark t))
     (t
      (eval-buffer)
      (message "Buffer evaluated!")))))
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (bind-key "C-c C-b" #'eval-region-or-buffer)))
#+END_SRC
** Switch to *Messages* buffer
#+BEGIN_SRC emacs-lisp
(defun switch-to-messages-buffer ()
  "Open up the *Messages* buffer in a new frame"
  (interactive)
  (switch-to-buffer-other-window "*Messages*"))
(bind-key "C-c m" #'switch-to-messages-buffer)
#+END_SRC
** Record keyboard macros
#+BEGIN_SRC emacs-lisp
;; Start & end recording new keyboard macro
(bind-key "M-[" #'kmacro-start-macro)
(bind-key "M-]" #'kmacro-end-macro)
;; Call the last keyboard macro that was recorded
(bind-key "C-l" #'call-last-kbd-macro)
#+END_SRC
** Emacs achievements
- Unlock achievements to track your emacs journey
- [[https://bitbucket.org/gvol/emacs-achievements/src/5b4b7b6816aaf105cd493f51b3860bd2f0c014a6/README.md?at=default&fileviewer=file-view-default][Bitbucket]]
#+BEGIN_SRC emacs-lisp
(use-package achievements
  :diminish achievements-mode
  :config (achievements-mode t))
#+END_SRC
** Freekeys
#+BEGIN_SRC emacs-lisp
;; (use-package free-keys
;;   :bind ("M-F" . free-keys))
#+END_SRC
** Benchmark init
- Figure out where you're burning time!!!
- [[https://www.emacswiki.org/emacs/BenchmarkInit][docs]]
- config
  #+BEGIN_SRC emacs-lisp
  (require 'benchmark-init)
  #+END_SRC
** Make Customize sort colors in a way that makes sense to me
#+BEGIN_SRC emacs-lisp
(setq list-colors-sort 'luminance)
#+END_SRC
** Funnel settings from Customize into another file
#+BEGIN_SRC emacs-lisp
;; Save the pesky Custom options elsewhere! (i.e. in user-emacs-directory/custom.el)
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; Uncomment this ONLY if you want to see the pesky Custom options. They *are* saved, although they're not loaded
;; (load custom-file :noerror)
#+END_SRC
* Global settings
** Better defaults
*** Remove default startup message, text at the top of scratch buffers
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC
*** Don't warn me before opening large files
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold nil)
#+END_SRC
*** Remove the default emacs toolbar (top of screen)
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** Hide the scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
*** When cursor is on a paren, highlight the other one 
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC
*** Put /relevant/ info in the title bar
Set the format for the title bar
- Disambiguation: 
  - An example [[https://cdn1.tekrevue.com/wp-content/uploads/2015/09/osx-finder-path-in-title-bar.jpg][window title bar]] in macOS
  - macOS calls this thing a "window title"
  - emacs calls this thing a "frame title"
- See also: https://www.emacswiki.org/emacs/FrameTitle
#+BEGIN_SRC emacs-lisp
;; %b - Buffer name
;; %m - Buffer mode
(setq frame-title-format '("%b - [%m]"))
#+END_SRC
*** Don't try to edit read-only portions of the minibuffer
Source: http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
#+BEGIN_SRC emacs-lisp
(customize-set-variable
 'minibuffer-prompt-properties
 (quote (read-only t cursor-intangible t face minibuffer-prompt)))
#+END_SRC
*** Don't litter working directory with backup files
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '((".*" . "~/.emacs.d/backup/"))    ; don't litter my filesystem
   delete-old-versions t
   kept-new-versions 50
   kept-old-versions 50
   version-control t)       ; use versioned backups
#+END_SRC
*** Don't litter working directory with autosave files
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-prefix "~/.emacs.d/autosaves/.saves-")
(setq auto-save-interval 1000) ; 1000 characters
(setq auto-save-timeout 60)    ; or 60 seconds
#+END_SRC
*** Delete highlighted text if you start typing on top of it
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Change "yes or no" prompts to "y or n" prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Don't add 2 spaces after a period
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
** Buffer management
See also: [[*Ace-window]]
*** Don't scroll a full screenful at a time
Keep some "context lines" around
#+BEGIN_SRC emacs-lisp
(setq next-screen-context-lines 3)
#+END_SRC
*** Cycle backwards through buffers
"C-x o", meet your new friend "C-c o"!
#+BEGIN_SRC emacs-lisp
(bind-key "C-c o" #'previous-multiframe-window)
#+END_SRC
*** Toggle fullscreen
Note: this resizes/maximizes the frame, but does not enter the OS's native fullscreen mode
#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-<return>" #'toggle-frame-fullscreen)
#+END_SRC 
*** Forbid vertical splitting
https://stackoverflow.com/questions/24140672/how-can-i-make-ess-to-split-window-horizontally-by-default
Not quite what I want, but helpful
#+BEGIN_SRC emacs-lisp
;; (setq split-height-threshold nil)
;; (setq split-width-threshold 0)
#+END_SRC
*** New frame (new "window" in os x parlance)
#+BEGIN_SRC emacs-lisp
(bind-key "H-n" #'make-frame)
(bind-key "H-w" #'delete-frame)
(bind-key "H-o" #'reveal-in-osx-finder)
#+END_SRC
*** Recentf (Recent (F)iles)

#+BEGIN_SRC emacs-lisp
(recentf-mode 1)

;; Number of items to save/suggest
(setq recentf-max-menu-items 75)

;; Save recentf every n seconds (n=300)
;; Source: https://emacs.stackexchange.com/a/15115
;; (run-at-time (current-time) 300 'recentf-save-list)

;; Exclude some files from the recentf list
;; Source: https://stackoverflow.com/a/8025312
;; 
;; Note: you can call recentf-cleanup to update your recentf list with
;; your updated exclude preferences
(add-to-list 'recentf-exclude "recentf")
(add-to-list 'recentf-exclude "bookmarks")
(add-to-list 'recentf-exclude "autoloads")
(add-to-list 'recentf-exclude "org-archive")
#+END_SRC
** Editing
- This section contains variable settings and functions.
- Rebind preexisting commands in [[*Global%20keybindings][*Global keybindings]]
*** Backwards kill-line
- It's the backwards version of C-k
- Note: M-k was originally bound to =kill-sentence=
- Source: https://www.emacswiki.org/emacs/BackwardKillLine
#+BEGIN_SRC emacs-lisp
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
(bind-key "M-k" #'backward-kill-line)
#+END_SRC
*** Make C-k kill the text AND newline
#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC
*** Transpose line up or down
#+BEGIN_SRC emacs-lisp
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
(global-set-key (kbd "M-p")  'move-line-up)
(global-set-key (kbd "M-n")  'move-line-down)
#+END_SRC
*** Comment out the current line
Source: http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
#+BEGIN_SRC emacs-lisp
(defun comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
       If no region is selected and current line is not blank and we are not at the end of the line,
       then comment current line.
       Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p))
           (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position)
                                   (line-end-position))
    (comment-dwim arg)))
(bind-key "M-;" #'comment-dwim-line)
#+END_SRC
** Global keybindings
#+BEGIN_SRC emacs-lisp
;; Eval buffer
(bind-key "C-c b" #'eval-buffer)

;; Count words in selected region

(bind-key "C-c w" #'count-words)
;; 23 Mar 2016 - binds "M-j" to "M-x-join-line", as per
;; <http://stackoverflow.com/questions/1072662/by-emacs-how-to-join-two-lines-into-one>
(bind-key "M-j" #'join-line)

;; Unbind Ctrl+meta+<right>, Ctrl+meta+<left> so BTT can use that to
;;bring a window to a new desktop
(global-unset-key (kbd "C-M-<left>"))
(global-unset-key (kbd "C-M-<right>"))
#+END_SRC
** Enable hidden commands
#+BEGIN_SRC emacs-lisp
;; Enable "C-x u" for upcase-region, "C-x l" for downcase-region
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC
** Shell / filesystem
*** Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-default-method "ssh")

  ;; Make tramp actually read my PATH variable
  ;; NOTE: needed to restart emacs and rm ~/.emacs.d/tramp on my local to get
  ;; this config to take effect
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  
  ;; Use SSH ControlMasters to try to keep any connections alive as long as
  ;; possible. This gets rid of a lot of time spent reconnecting and
  ;; re-inputting credentials
  (setq tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPersist=yes"))
#+END_SRC
*** File interactions (delete, rename, etc.)
- Note: OS-specific settings should be in their own literate/OS.org file.
- However, some OS-agnostic settings can still live here to reduce code duplication
#+BEGIN_SRC emacs-lisp
(bind-key "H-d" #'delete-file)
(bind-key "H-R" #'rename-file)

;; I don't want a prompt, but I /do/ want some verification when a revert happens
(defun krista/revert-buffer-no-prompt-yes-message ()
  "Revert buffer without a yes/no prompt, and then show a message"
  (revert-buffer-no-prompt)
  (message "Buffer reverted"))
(bind-key "H-C-r" #'krista/revert-buffer-no-prompt-yes-message)
#+END_SRC
*** Copy file path to clipboard
#+BEGIN_SRC emacs-lisp
;; Source: https://stackoverflow.com/a/2417617
(defun copy-file-name-to-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
(bind-key "H-f" #'copy-file-name-to-clipboard)
#+END_SRC
*** "Immediate todo" buffer
When I'm tired or overwhelmed, it often helps me to write a
super-granular todo list. I usually don't want to save these, but I
would like to be able to quickly open a new org-mode buffer to gather
my thoughts.

This function lets me do just that!
#+BEGIN_SRC emacs-lisp
;; Sources: 
;; https://stackoverflow.com/questions/25791605/emacs-how-do-i-create-a-new-empty-buffer-whenever-creating-a-new-frame
;; https://stackoverflow.com/questions/26419164/programmatically-setting-major-mode-of-buffer-with-emacs-lisp
(defun krista/immediate-todo ()
  "Create a new temp buffer in org mode."
  (interactive)
  (let ((buffer (generate-new-buffer "*Krista* Immediate Todo")))
    (switch-to-buffer buffer)
    (with-current-buffer buffer (org-mode))))
(bind-key "C-c i" #'krista/immediate-todo)
#+END_SRC
*** Revert buffer without prompting
#+BEGIN_SRC emacs-lisp
(defun revert-buffer-no-prompt ()
  "Revert buffer without confirm prompt"
  (interactive)
  (revert-buffer t t))
(bind-key "H-R" #'revert-buffer-no-prompt)
#+END_SRC
** Timestamps
#+BEGIN_SRC emacs-lisp
;; Customize dates
;; ----------------

(with-eval-after-load 'org-mode
  ;; Use am/pm instead of 24-hour time!
  ;; Source: http://dept.stat.lsa.umich.edu/~jerrick/org_agenda_calendar.html
  (setq org-agenda-timegrid-use-ampm t)
  (setq-default org-display-custom-times t)

  (setq org-time-stamp-custom-formats
        ;; What this string does:
        ;; [a = abbreviated day of week] [b = abbreviated month] [e = day of month] [Y = 4-digit year]
        '("<%a %b %e %Y>"
          ;;
          ;; ^^ + [l = hour (1-12)]:[M = minute] [a = am/pm]
          . "<%a %b %e %Y %l:%M%p>"))

  ;; TODO: see this for custom time formats
  ;; https://orgmode.org/manual/Custom-time-format.html#Custom-time-format

  ;; Org timestamp DWIM
  ;; Source: https://emacs.stackexchange.com/a/3320
  (defvar time-range-with-pm-suffix '("1:00" . "6:59"))
  (defun org-analyze-date-dwim (original-fun ans org-def org-defdecode)
    (let* ((time (funcall original-fun ans org-def org-defdecode))
           (minute (nth 1 time))
           (hour (nth 2 time))
           (minutes (+ minute (* 60 hour)))
           s)
      (when (and (< hour 12)
                 (not (string-match "am" ans))
                 (>= minutes (org-duration-to-minutes (car time-range-with-pm-suffix)))
                 (<= minutes (org-duration-to-minutes (cdr time-range-with-pm-suffix))))
        (setf (nth 2 time) (+ hour 12))
        (when (boundp 'org-end-time-was-given)
          (setq s org-end-time-was-given)
          (if (and s (string-match "^\\([0-9]+\\)\\(:[0-9]+\\)$" s))
              (setq org-end-time-was-given
                    (concat (number-to-string (+ 12 (string-to-number (match-string 1 s))))
                            (match-string 2 s))))))
      time))
  (advice-add 'org-read-date-analyze :around #'org-analyze-date-dwim)


  ;; Don't penalize me for accidentally typing too much!
  ;; Source: https://emacs.stackexchange.com/a/2591
  (defvar parse-time-weekdays-longer
    '(("sund" . 0) ("tues" . 2) ("thurs" . 4)))
  (defvar parse-time-months-longer
    '(("janu" . 1) ("dece" . 12)))
  (eval-after-load 'parse-time
    '(progn
       (setq parse-time-weekdays (nconc parse-time-weekdays
                                        parse-time-weekdays-longer))
       (setq parse-time-months (nconc parse-time-months
                                      parse-time-months-longer))))
  )
#+END_SRC
* Appearance
** Aesthetic tweaks
*** Set cursor appearance
Note: changing the cursor-type does not take effect until emacs is restarted,
because it only sets the /default/ cursor type. I have not yet figured
out how to set it immediately, but this should suffice as startup config.
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
(setq-default cursor-in-non-selected-windows 'hollow)
#+END_SRC
*** Change the fringe wrap indicators
- Fringe wrap indicators are used to show that a line is wider than
  the current window. 
- The default fringe wrap indicators are a curly arrow
- I prefer an ellipsis:
  #+BEGIN_SRC emacs-lisp
   ;; Only relevant if indicate-empty-line is set to t
   (define-fringe-bitmap 'empty-line [0 0 #x3c #x3c #x3c #x3c 0 0]) 

   (define-fringe-bitmap 'right-curly-arrow
     [#b00000000
      #b00000000
      #b00000000
      #b00000000
      #b00000000
      #b10010010
      #b10010010
      #b00000000])

   (define-fringe-bitmap 'left-curly-arrow
     [#b00000000
      #b00000000
      #b00000000
      #b00000000
      #b00000000
      #b10010010
      #b10010010
      #b00000000])

  (setq visual-line-fringe-indicators (quote (left-curly-arrow right-curly-arrow)))
  #+END_SRC
*** Hide the fringe
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fringe nil :background "#001519")
;;(set-face-attribute 'vertical-border nil :foreground "#cf7a00")
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Code-13" :weight 'light)
(set-face-attribute 'bold nil :weight 'demibold)
;; https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs
;; for the railwaycat emacs port
(mac-auto-operator-composition-mode)


(set-face-attribute 'bold-italic nil
                    :slant 'oblique
                    :weight 'bold)

(set-face-attribute 'font-lock-doc-face nil
                    :foreground "#58615a"
                    :family "Fira Code")

(set-face-attribute 'region nil :background "#032929")

#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
;; Load my theme
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "literate/tron-doom/"))
(load-theme 'tron-doom t) ; t for "don't ask me to load this theme"

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Enable flashing mode-line on errors
;; (doom-themes-visual-bell-config)
#+END_SRC
** Hide battery load, native battery percentage in modeline
#+BEGIN_SRC emacs-lisp
(setq display-battery-mode nil)
(setq display-time-default-load-average nil)
#+END_SRC
* Major packages
** LaTeX
#+BEGIN_EXAMPLE 
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :defer 5
  :config
  ;; TODO: fucks up prettify for some reason?
  ;; (company-auctex-init)
  ;; save buffer style info
  (setq TeX-auto-save t)
  ;; automatically parse style info
  (setq TeX-parse-self t)
  ;; no tabs
  (setq TeX-auto-untabify t)
  ;; TODO: unsure what this does
  ;; (setq-default TeX-master 'dwim)
  (TeX-PDF-mode 1)
  (defun spruce/TeX-open-output-buffer ()
    (interactive)
    (let ((output-file (with-current-buffer TeX-command-buffer
                         (expand-file-name
                          (TeX-active-master (TeX-output-extension))))))
      (find-file output-file)))
  (add-to-list 'TeX-view-program-list
               (list "Emacs" #'spruce/TeX-open-output-buffer))

  (setq TeX-view-program-selection '((output-pdf "Emacs")))
  ;; better name for local variable
  (defun latex-compile ()
    (interactive)
    (save-buffer)
    (TeX-command "LaTeX" 'TeX-master-file))

  (setq TeX-auto-local ".auctex-auto")
  ;; auto revert pdf buffer
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  ;; show errors if there were any
  (setq TeX-error-overview-open-after-TeX-run t)
  ;; don't confirm before cleaning files
  (setq TeX-clean-confirm nil)
  (setq TeX-save-query nil)
  (defun TeX-insert-pair (arg open-str close-str)
    "Like TeX-insert-brackes but for any pair"
    (interactive "P")
    (if (TeX-active-mark)
        (progn
          (if (< (point) (mark)) (exchange-point-and-mark))
          (insert close-str)
          (save-excursion (goto-char (mark)) (insert open-str)))
      (insert open-str)
      (save-excursion
        (if arg (forward-sexp (prefix-numeric-value arg)))
        (insert close-str))))
  (setq TeX-electric-sub-and-superscript t)
  (put 'TeX-command-extra-options 'safe-local-variable
       (lambda (x) (string-equal x "-shell-escape")))
  (setq-default TeX-command-extra-options "-shell-escape")
  (use-package latex
    :ensure nil
    :config
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq LaTeX-math-menu-unicode t)
    (add-hook 'LaTeX-mode-hook (lambda () (latex-electric-env-pair-mode t)))
    (add-hook 'LaTeX-mode-hook
              (lambda () (set-fill-column 90)))
    (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
    ;; (add-hook 'LaTeX-mode-hook (lambda () (prettify-symbols-mode)))
    (defun spruce/LaTeX-insert-inline-math (arg)
      (interactive "P")
      (TeX-insert-pair arg "\\( " " \\)"))
    (defun spruce/LaTeX-insert-display-math (arg)
      (interactive "P")
      (TeX-insert-pair arg "\\[ " " \\]"))

    (defun spruce/LaTeX-insert-problem (problem-number &optional is-last)
      (beginning-of-line)
      (let ((problem (concat "\\problem{" problem-number "}"))
            (unfinished "\\unfinished{}"))
        (insert problem "\n\n" unfinished "\n"
                (if is-last "" "\n"))))

    (defun spruce/LaTeX-make-problem-list ()
      (interactive)
      (let ((data (split-string (thing-at-point 'line t))))
        (when data
          (delete-region (line-beginning-position)
                         (line-end-position))
          (mapc #'spruce/LaTeX-insert-problem (butlast data))
          (spruce/LaTeX-insert-problem (car (last data)) t))))

    (defun spruce/LaTeX-mode-keybindings ()
      (bind-key "H-C-j" #'spruce/LaTeX-insert-inline-math
                (current-local-map))
      (bind-key "H-C-k" #'spruce/LaTeX-insert-display-math
                (current-local-map))
      (bind-key "C-c x p" #'spruce/LaTeX-make-problem-list
                (current-local-map))
      (local-unset-key "\""))

    (add-hook 'LaTeX-mode-hook #'spruce/LaTeX-mode-keybindings)
    (add-hook 'org-mode-hook #'spruce/LaTeX-mode-keybindings)
    (with-eval-after-load 'smartparens
      (add-hook 'TeX-mode-hook #'smartparens-mode))
    (use-package font-latex
      :ensure nil
      :config
      (set-face-attribute 'font-latex-sedate-face nil
                          :inherit 'font-lock-constant-face
                          :foreground 'unspecified))
    :bind (:map LaTeX-mode-map
           ("C-c c" . latex-compile))))

(use-package reftex
  :diminish reftex-mode
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-toc-follow-mode t))

;; Don't prompt me for section labels!!!
;; Source: https://tex.stackexchange.com/a/194017
;; (eval-after-load "latex"
;;   '(progn
;;      (defun LaTeX-label (env))))
;; (setq latex-templates-directory (with-user-d "templates" "latex-templates"))
;; (defun latex-template ()
;;   (interactive)
;;   (let* ((files (file-expand-wildcards (concat latex-templates-directory "*.tex")))
;;          (selection (completing-read "LaTeX Template: "
;;                                      (mapcar #'file-name-base files))))
;;     (insert-file-contents (concat latex-templates-directory selection ".tex"))))
#+END_SRC
#+END_EXAMPLE
** Org-mode
*** Config
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading org-mode settings...")
(setq org-modules '(org-bbdb org-bibtex org-docview org-gnus
			     org-habit org-info org-irc org-mhe
			     org-rmail org-w3m))

(use-package org
  :diminish org-indent-mode
  :config

  ;; Places to sniff when compiling a list of TODO items
  ;;
  ;; NOTE: putting this piece of config here because a lot of
  ;; org-agenda stuff relies on the variable org-agenda-files
  (setq org-agenda-files
	(list
	 ;; GTD files
	 krista/todo-file
	 krista/projects-file
	 krista/waiting-file
	 krista/tickler-file
         ;; Other files w/daily info
	 krista/gcal-file))

  (message "[krista] Setting org-modules...")
  (message "[krista] Loading org-aesthetics...")
  <<org-aesthetics>>

  (message "[krista] Loading org-habits...")
  <<org-habits>>

  (message "[krista] Loading org-ordered-tasks...")
  <<org-ordered-tasks>>

  (message "[krista] Loading org-capture...")
  <<org-capture>>

  (message "[krista] Loading org-refile...")
  <<org-refile>>

  (message "[krista] Loading org-agenda...")
  <<org-agenda>>
  <<org-super-agenda>>

  (message "[krista] Loading org-inline-images...")
  <<org-inline-images>>
  
  (message "[krista] Loading org-tree-behavior...")
  <<org-tree-behavior>>

  (message "[krista] Loading org-code-snippets...")
  <<org-quick-source-blocks>>
  <<org-babel-config>>

  (message "[krista] Loading org-links...")
  <<org-links>>

  (message "[krista] Loading org-tables...")
  <<org-tables>>

  (message "[krista] Loading markdown-as-org...")
  <<markdown-as-org>>
  :bind (
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda)
         ;; Links!
         ;; - C-c C-l will insert link,
         ;; - C-c C-o will open the link at the point
         ("C-c l" . org-store-link)

         ;; (:map org-mode-map
	 ;;       ("M-N" . org-shiftmetadown)
	 ;;       ("M-B" . org-shiftmetaleft)
	 ;;       ("M-F" . org-shiftmetaright)
	 ;;       ("M-P" . org-shiftmetaup)
	 ;;       ;;
	 ;;       ("M-n" . org-metadown)
	 ;;       ("M-b" . org-metaleft)
	 ;;       ("M-f" . org-metaright)
	 ;;       ("M-p" . org-metaup))
         ))

#+END_SRC
*** Tips from http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
**** todo / schedule / deadline
- C-c C-t :: org-todo
- C-c C-s :: org-schedule
- C-c C-d :: org-deadline
- M-shift-RET :: org-insert-todo-heading
                 - Adds newline
                 - Adds bullet at same indentation level
                 - Bullet automatically has a `TODO' header
**** agenda view:
- hit `t' to mark an item DONE
- hit `l' to enter log display
**** shift-TAB :: OVERVIEW vs. normal mode
*** Aesthetics
#+BEGIN_SRC emacs-lisp :noweb-ref org-aesthetics :tangle no
;; Display bullets instead of asterisks
(use-package org-bullets
  :diminish
  :config
  ;; (setq org-bullets-bullet-list (quote ("⊕" "⦷" "⊜" "⊝"))))
  (setq org-bullets-bullet-list (quote ("•" "•" "•" "•"))))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))

;; Make LaTeX bigger when I'm presenting
;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 4.0))

;; Setting this to `t' will automatically render LaTeX special
;; characters, if possible/sensible
;; E.g. "\" + "alpha" becomes a lowercase alpha
;; I have it turned off, but it's here
;; (setq org-pretty-entities t)

;; Setting this to `t' will use {} to render sub/super-scripts
;; e.g. asdf_{123} is rendered as "asdf sub 123"
;; I have it turned off, but it's here
(setq org-use-sub-superscripts "{}")


;; Hide org markup elements
;; See http://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
;; Note: This change may not take effect until you restart emacs:
;; See http://orgmode.org/manual/Emphasis-and-monospace.html
(setq org-hide-emphasis-markers t)

;; Only annotate/mark up /part/ of a word
;;
;; Background/problem: in org mode, you can't do something like
;; *G*nu's *N*ot *U*nix
;; i.e. you can't mark up a portion of the word. It's all or nothing
;;
;; Solution: insert a zero-width space to break up the word into portions
;; Example: *G*\x200Bnu's *N*\x200Bot *U*\x200Bnix
;;
;; Source: https://emacs.stackexchange.com/a/18511
(defun insert-zero-width-space ()
  (interactive)
  (insert-char #x200b))
(define-key org-mode-map (kbd "C-*") 'insert-zero-width-space)
(setq org-emphasis-regexp-components
      '("   ('\"{\x200B" "-     .,:!?;'\")}\\[\x200B" "     
,\"'" "." 1))
(setq-default org-emphasis-regexp-components
      '("   ('\"{\x200B" "-     .,:!?;'\")}\\[\x200B" "     
,\"'" "." 1))

;; One thing about inserting these spaces is that it might look
;; strange when exported to other formats. So this export filter
;; removes the spaces on export
;;
;; Source: https://emacs.stackexchange.com/a/18511 (same post)
;; (defun my-filter-remove-u200b (text backend info)
;;   "Remove zero width space character (U+200B) from TEXT."
;;   (replace-regexp-in-string "\x200B" "" text))
;; (add-to-list 'org-export-filter-plain-text-functions
;; 	 'my-filter-remove-u200b)

;; Make top-level headings larger, and lower-level headings progressively smaller
;; (set-face-attribute 'org-level-1 nil :inherit 'outline-1 :height 1.2)
;; (set-face-attribute 'org-level-2 nil :inherit 'outline-2 :height 1.0)

;; Use my theme as the color scheme for source blocks
(setq org-src-fontify-natively t)

;; Set different faces for TODO items with different priority levels
;; Source: https://emacs.stackexchange.com/a/17405
(setq org-priority-faces '((?A . (:foreground "#cf7a00"))
			  (?B . (:foreground "#00a890"))
			  (?C . (:foreground "#075f5f"))))

;; If t: apply the priority-face to all headline text for agenda view
;; (setq org-agenda-fontify-priorities nil)

;; WIP: Trying to get org subheadings to inherit priority from parent
;;
;; Source: https://emacs.stackexchange.com/questions/37800/how-to-inherit-priority-in-org-mode?rq=1
;; (setq org-use-property-inheritance '("PRIORITY"))
;;
;; Source: https://emacs.stackexchange.com/questions/7335/properties-inheriting-in-org-doesnt-work
(setq org-use-property-inheritance (quote ("owner")))

;; Don't add a weird indent to source blocks
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)

;; Org mode clean view
;; <http://orgmode.org/manual/Clean-view.html>
(setq org-hide-leading-stars t)
(setq org-startup-indented t)
(setq org-indent-indentation-per-level 4)
(setq org-adapt-indentation t)

;; When you visit an agenda for the first time, still honor my startup preferences
(setq org-agenda-inhibit-startup nil)

;; In org mode C-a/e moves to beginning of text in line, after header asterisks
;; ( however you can press C-a/C-e again to go all the way to the beginning/end)
(setq org-special-ctrl-a/e t)

;; Set default size for org tables
(setq org-table-default-size "2x3")

(set-face-attribute 'org-code nil
		    :inherit 'shadow
		    :foreground "dark sea green"
		    :family "Courier")

(set-face-attribute 'org-verbatim nil
		    :inherit 'shadow
		    :stipple nil
		    :foreground "AntiqueWhite4"
		    :family "Andale Mono")

;; SOURCE: Adapted from
;; https://github.com/jethrokuan/.emacs.d/blob/master/config.org#org-todo-keywords
;;
;; Semantics of each TODO keyword:
;; 
;; TODO:	An action that will have to be completed eventually, but maybe not yet
;; NEXT:	An action that can be completed at this very moment, in the correct context
;; DONE:	An item that is completed, and ready to be archived
;; WAITING:	An item that awaits input from an external party
;; BLOCKED:	An item which cannot be completed due to some circumstances
;; CANCELLED:	An item that was once considered,
(setq org-todo-keywords
      '((sequence "NEXT(n)" "TODO(t)" "PROJECT(p)" "BLOCKED(b)" "WAITING(w)" "|" "CANCELLED(c)" "DONE(d)")))
;; Org todo keyword faces
;; NOTE: see also: doom-themes-common.el, where org-todo, org-done are defined
(setq org-todo-keyword-faces
      '(("TODO" :foreground "#77A4DE")
	("NEXT" :foreground "#87BADE")
	("PROJECT" :foreground "#8A84B6")
	("BLOCKED" :foreground "#888a85")
	("WAITING" :foreground "#888a85")
	;; ("SOMEDAY" :foreground "#58615a")
	("DONE" :foreground "#075f5f" :strike-through "#075f5f")
	("CANCELLED" :foreground "#58615a" :strike-through "#58615a")))

;; Org "there's more under this headline/bullet!" ellipsis
;; ‣ ⁕ ↷ ↝ → ⇀ ⇢ ⇾ ⋱ 〉 ► ▻ ➝ ➛ ⟝ ⟶ ⫎ ⬎ ✳
(set-display-table-slot standard-display-table
			'selective-display (string-to-vector " ⬎"))


;; Source: https://www.reddit.com/r/orgmode/comments/3c4xdk/spacing_between_items_when_trees_are_folded/
(setq org-cycle-separator-lines 1)


;; Prettier time tracking
;; Config from https://www.youtube.com/watch?v=uVv49htxuS8
(setq org-clock-into-drawer "CLOCKING")
#+END_SRC
*** Habits
#+BEGIN_SRC emacs-lisp :noweb-ref org-habits :tangle no
;; If non-nil: Don't pollute the agenda with repetitions of the habit
;; (I only want to see the habit printout on today's agenda entry!)
(setq org-habit-show-habits-only-for-today t)

;; NOTE: If using unicode/non-fixed-width glyphs for
;; org-habit-today-glyph and org-habit-completed-glyph, then the
;; "today" glyphs won't necessarily line up :(
(setq org-habit-today-glyph ?!)
(setq org-habit-completed-glyph ?x)

;; If non-nil: show all habits in the agenda, even if you're not
;; scheduled to do them today
(setq org-habit-show-all-today t)

;; If non-nil: if you do something late, show it as green (EVEN if you
;; did it later than you were supposed to)
(setq org-habit-show-done-always-green nil)

;; Move the org habits graphs over to the rhs of the screen 
;; NOTE: This is as far as I can move it without overflowing the
;; buffer when I have the agenda in half of the frame
;;
;; => If I make changes to org-habit-following/preceding-days, then I
;; should also change org-habit-graph-column
(setq org-habit-following-days 3)
(setq org-habit-preceding-days 21)
(setq org-habit-graph-column 63)
#+END_SRC
*** Org ordered tasks
- Source: https://www.youtube.com/watch?v=9hxEEbUWJYA
- Note: Toggle :ORDERED: property with C-c C-x o
#+BEGIN_SRC emacs-lisp :noweb-ref org-ordered-tasks :tangle no
;; Automatically make a tag when you mark something as ordered
(setq track-ordered-property-with-tag t)

;; if t: Dim out blocked tasks when in the agenda view
(setq org-agenda-dim-blocked-tasks t)


;; If t: Don't let me mark dependent TODO items done until pre-reqs
;; are done
(setq org-enforce-todo-dependencies nil)
(setq org-enforce-todo-checkbox-dependencies t) ; Same for todo checkboxes

#+END_SRC
*** Exporting to LaTeX
#+BEGIN_SRC emacs-lisp
;; Put newlines around my images, please!
;; http://emacs.stackexchange.com/questions/5363/centered-figures-in-org-mode-latex-export?rq=1
(advice-add 'org-latex--inline-image :around
            (lambda (orig link info)
              (concat
               "\\begin{center}"
               (funcall orig link info)
               "\\end{center}")))
#+END_SRC
*** Org Capture
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref org-capture :tangle no
;; Default file if a capture template doesn't specify otherwise
(setq org-default-notes-file krista/inbox-file)

;; The capture templates!
;;
;; Overview - Components of a capture template:
;; https://orgmode.org/manual/Template-elements.html#Template-elements
;;
;; A quick starter example:
;; https://orgmode.org/manual/Capture-templates.html#Capture-templates
;;
;; The gory details of what goes into an org-capture template:
;; http://orgmode.org/manual/Template-expansion.html#Template-expansion
(setq org-capture-templates
      '(

        ;; Prefix key. See https://lists.gnu.org/archive/html/emacs-orgmode/2015-10/msg00124.html
        ;; ("g" "(G)TD...")
        
        ;; The "%^g" = a prompt for tags
        ;; Source: https://stackoverflow.com/a/31688974
        ("t" "(t)ODO item" entry
         (file krista/todo-file)
         "* NEXT %i%? %^g\n")

        ("P" "Inactive (P)roject" entry
         (file krista/inactive-projects-file)
         "* PROJECT %i%?\n")

        ("p" "Active (p)roject" entry
         (file krista/projects-file)
         "* PROJECT %i%?\n")

        ("w" "(w)aiting list" entry
         (file krista/waiting-file)
         "* WAITING %i%?\n Date created: %U. Follow up on %^t\n")

        ("i" "(i)nbox" entry
         (file krista/inbox-file)
         "* %i%?\n")

        ("?" "Someday-maybe(?)" entry
         (file krista/someday-maybe-file)
         "* %i%?\n")

        ("T" "(T)ickler" entry
         (file krista/tickler-file)
         "* %i%?\n  Prompt on: %^t\n")

        ;; m prefix key
        ("m" "(m)edia...")

        ("mb" "(b)ooks" entry
         (file krista/books-file) "* %i%?\n")
        ("mm" "(m)usic" entry
         (file krista/music-file) "* %i%?\n")
        ("mM" "(M)ovies" entry
         (file krista/movies-file) "* %i%?\n")
        ("mr" "(r)eading" entry
         (file krista/reading-file) "* %i%?\n")
        ("mt" "(t)elevision" entry
         (file krista/tv-file) "* %i%?\n")
        ("mv" "(v)ideo games" entry
         (file krista/video-games-file) "* %i%?\n")

        ;; Note: this entry is coupled to my config for org-gcal.
        ("c" "(c)alendar" entry
         (file  "~/Dropbox/orgzly/gcal.org")
         "* %i%?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
        
        ("Q" "(Q)uotes" entry
         (file+olp "~/core/lists/quotes.org" "quotes")
         "* %i%?\n")

        ("s" "(s)hopping" entry
         (file+olp krista/shopping-file "Shopping")
         "* %i%?\n")

        ;; Shortcut key for the capture menu:
        ("a"                            
         ;; Description for the capture menu:
         "(A)nnoy"                      
         ;; Type -- Is it a headline ("entry"), checkbox, etc?
         entry
         ;; Target destination -- file + heading(s):
         (file+olp krista/annoy-file "annoy" "refile")
         ;; Pre-formatting:
         ;; (Example: you can have the template automatically add the
         ;; date, or you can specify certain properties,etc.)
         "* %?\n%i\n")

        ))

;; If t: add a bookmark pointing to the last thing I captured
;; (setq org-capture-bookmark nil)
#+END_SRC
*** Org Refile
#+BEGIN_SRC emacs-lisp :noweb-ref org-refile :tangle no
(setq org-refile-use-outline-path 'file)
(setq org-refile-allow-creating-parent-nodes (quote confirm)) ; allow refile to create parent tasks with confirmation

;; Options for org-refile. limiting level to 2 for performance reasons.
(setq org-refile-targets `((,(append org-agenda-files
				     krista/media-files
				     (list krista/someday-maybe-file
					   krista/annoy-file
                                         krista/random-ideas-file
                                         krista/shopping-file))
			    :maxlevel . 2)))
#+END_SRC
*** Agenda
For reference: https://emacs.stackexchange.com/questions/4063/how-to-get-the-raw-data-for-an-org-mode-agenda-without-an-agenda-view/12563#12563
#+BEGIN_SRC emacs-lisp :noweb-ref org-agenda :tangle no
;; If non-nil: mousing over TODO items in org agenda => show TODO item in other buffer
(setq org-agenda-start-with-follow-mode nil)

;; Don't eat my timestamps! If I put them in the org-agenda-prefix-format, then I *WANT* them in the org-agenda-prefix-format!!!
(setq org-agenda-remove-times-when-in-prefix nil)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Start the week on Sunday
;; https://emacs.stackexchange.com/a/28913
(setq org-agenda-start-on-weekday 0)

;; Show the whole week (7 days)
(setq org-agenda-span 7)

;; Don't display items that are done
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done nil)

;; If a task is due soon, but I have it scheduled, skip the "DANGER, WILL ROBINSON! DEADLINE APPROACHING" reminder.
;; https://orgmode.org/manual/Deadlines-and-scheduling.html#Deadlines-and-scheduling
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)

;; Don't display *all* future repetitions of an event when I'm in agenda view
;; Source: https://emacs.stackexchange.com/a/12618
;; In the future (Org 9.1), use this: (setq org-agenda-show-future-repeats nil)
(setq org-agenda-repeating-timestamp-show-all nil)

;; Documentation for this variable: https://orgmode.org/worg/doc.html
(setq org-agenda-sorting-strategy
      '((agenda habit-down priority-down tag-up effort-down todo-state-up time-up deadline-up scheduled-up)
        (todo   habit-down priority-down tag-up effort-down todo-state-up time-up deadline-up scheduled-up)))

;; Default effort estimates
(setq org-global-properties
      '(("Effort_ALL" . "0:05 0:15 0:30 1:00 1:30 2:00 4:00 6:00 8:00 0:00")))

;; Org Tags
;; --------
(setq org-agenda-use-tag-inheritance t)
(setq org-use-tag-inheritance t)

;; Docs for org-tag-alist and quick-selection: https://orgmode.org/manual/Setting-tags.html
(setq org-tag-alist
      '(("home" . ?h)
        ("laptop" . ?l)
        ("anywhere" . ?a)
        ("phone" . ?p)
        ("reading" . ?r)
        ("errand" . ?e)
        ("call" . ?c)
        ("email" . ?m)
        ("text" . ?t)))
;; Turn on quick-selection for tags
(setq org-fast-tag-selection-single-key t)

;; Align tags close to the right-hand side of the window
;; Source: https://lists.gnu.org/archive/html/emacs-orgmode/2010-12/msg00410.html
(add-hook 'org-finalize-agenda-hook 'place-agenda-tags)
(defun place-agenda-tags ()
  "Put the agenda tags by the right border of the agenda window."
  (setq org-agenda-tags-column (- 15 (window-width)))
  (org-agenda-align-tags))


;; Don't use a time grid in the agenda view
(setq org-agenda-use-time-grid nil)
;; Don't use a time grid anywhere else, either! (Time grid doesn't
;; disappear from agenda view unless timegrid is disabled everywhere.
;; Hrm.)
(setq org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        "" ""))

;; Make 'q' kill the org agenda buffer
(setq org-agenda-sticky nil)

;; Don't smush todo/agenda sections together when displaying both
(setq org-agenda-compact-blocks nil)

;; Add a separator between days of the week. This variable specifies
;; the separator character(s) to use as fill
(setq org-agenda-block-separator ?-)

;; If t: Don't necessarily build the agenda just because I'm opening
;; the Agenda Commands dispatch. (Note: this improves performance)
(setq org-agenda-inhibit-startup t)


;; Archiving TODO items
;; ---------------------

;; Put archived todo items in a separate folder, rather than littering
;; the current directory with hidden files
(setq org-archive-location "~/core/emacs-archives/%s-archive::")

;; Modified from: https://stackoverflow.com/a/27043756
;; I added an interactive option to specify the scope interactively
(defun org-archive-done-tasks ()
  (interactive)
  (let ((scopes '(("file" . 'file) ("tree" . 'tree) ("agenda" . 'agenda))))
    (org-map-entries (lambda ()
                       (org-archive-subtree)
                       (setq org-map-continue-from (outline-previous-heading)))
                     "/DONE|CANCELLED"
                     (cdr (assq (completing-read
                                 "Scope: " '(("file" 1) ("tree" 2) ("agenda" 3))
                                 nil t "")
                                scopes)))))

;; Source: https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-org.el
(defun air-org-skip-if-habit (&optional subtree)
  "Skip an agenda entry if it has a STYLE property equal to \"habit\".
Skip the current entry unless SUBTREE is not nil, in which case skip
the entire subtree."
  (let ((end (if subtree (save-excursion (org-end-of-subtree t))
               (save-excursion (progn (outline-next-heading) (1- (point)))))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        end
      nil)))

(setq org-stuck-projects
      ;; Tag/todo keyword/property(s) identifying GTD Projects
      '("+PROJECT/-CANCELLED-DONE" 

	;; todo keyword(s) identifying GTD Next Actions
	("NEXT")

	;; tags identifying non-stuck projects.
	("shopping")

	;; An arbitrary regular expression matching non-stuck projects.
        ""))

;; Custom agenda commands
(setq org-agenda-custom-commands
      '(

	("a" "Show (a)genda & high priority todo items"
	 ((agenda ""
                  ((org-agenda-overriding-header "Agenda")))
	  (tags-todo "+PRIORITY=\"A\""
                     ((org-agenda-overriding-header "High priority todo items")))
	  ))

	("n" "Show both agenda & todo items"
	 ((agenda ""
                  ((org-agenda-overriding-header "Agenda")))
	  (todo ""
                ((org-agenda-overriding-header "Global todo list")))
	  ))

        ("g" "(g)roup actionable items by context"
	 ((tags-todo "home/NEXT"
		     ((org-agenda-overriding-header "Home")))
          (tags-todo "laptop/NEXT"
		     ((org-agenda-overriding-header "Laptop")))
          (tags-todo "anywhere/NEXT"
		     ((org-agenda-overriding-header "Anywhere")))
          (tags-todo "phone/NEXT"
		     ((org-agenda-overriding-header "Phone")))
          (tags-todo "reading/NEXT"
		     ((org-agenda-overriding-header "Reading")))
          (tags-todo "errand/NEXT"
		     ((org-agenda-overriding-header "Errand")))
          (tags-todo "call/NEXT"
		     ((org-agenda-overriding-header "Call")))
          (tags-todo "text/NEXT" 
		     ((org-agenda-overriding-header "Text")))
          (tags-todo "1password/NEXT" 
		     ((org-agenda-overriding-header "1Password")))
	  ))

        ;; Commands to only display one GTD context
        ("c" . "Select GTD (c)ontext...")
        ("ch" "(h)ome" tags-todo "home/NEXT" nil)
        ("cl" "(l)aptop" tags-todo "laptop/NEXT" nil)
        ("ca" "(a)nywhere" tags-todo "anywhere/NEXT" nil)
        ("cp" "(p)hone" tags-todo "phone/NEXT" nil)
        ("cr" "(r)eading" tags-todo "reading/NEXT" nil)
        ("ce" "(e)rrand" tags-todo "errand/NEXT" nil)
        ("cc" "(c)all" tags-todo "call/NEXT" nil)
        ("ct" "(t)ext" tags-todo "text/NEXT" nil)
        ("c1" "(1)Password" tags-todo "1password/NEXT" nil)

        ;; Source: modified from
        ;; https://github.com/jethrokuan/.emacs.d/blob/master/config.org#stage-3-reviewing
        ("r" "GTD Weekly (r)eview"
         (
	  (agenda ""
                  ((org-agenda-overriding-header "Agenda")))
	  (tags-todo "+PRIORITY=\"A\""
		     ((org-agenda-overriding-header "High priority todo items")))
          (todo ""
                ((org-agenda-overriding-header "To Refile")
                 (org-agenda-files (list krista/inbox-file))))
          (todo "PROJECT"
                ((org-agenda-overriding-header "List of Projects")
		 (org-agenda-files (list krista/projects-file))))
          (todo "NEXT" 
                ((org-agenda-overriding-header "Next (Ready to do)")))
          (todo "TODO"
                ((org-agenda-overriding-header "Todo queue (i.e. not ready to do yet)")
                 (org-agenda-files (list krista/todo-file krista/projects-file))
                 (org-agenda-skip-function '(org-agenda-skip-entry-if 'deadline
                                                                      'scheduled))))
          (todo "BLOCKED"
                ((org-agenda-overriding-header "Blocked")))
          (todo "WAITING"
                ((org-agenda-overriding-header "Waiting for input")))
          (todo "PROJECT"
                ((org-agenda-overriding-header "Someday-maybe")
                 (org-agenda-files (list krista/someday-maybe-file))))
          ))

        ;; NOTE: I only want to see the names of projects, and then
        ;; use follow mode to review the nitty-gritty details.
        ("?" "Someday-maybe(?)" todo "PROJECT"
         ((org-agenda-files `(,krista/someday-maybe-file))
          (org-agenda-start-with-follow-mode t)))

        ("i" "(i)nbox" todo ""
         ((org-agenda-files `(,krista/inbox-file))))

        ))
#+END_SRC
*** Super-agenda
- https://github.com/alphapapa/org-super-agenda 
- Note: I love this package / it makes it wayyyy easier to define
  custom agenda commands that actually look good. However, I want to
  get the rest of my GTD workflow a bit more stable before I re-enable
  super-agenda
**** config itself
#+BEGIN_EXAMPLE 
#+BEGIN_SRC emacs-lisp :noweb-ref org-super-agenda :tangle no
(use-package org-super-agenda 
  :config
  (org-super-agenda-mode)
  (setq org-super-agenda-fontify-whole-header-line t)

  (setq org-super-agenda-groups
  '((:name "Scheduled today"
		 :time-grid t
		 :scheduled today)
	  (:name "Due today"
		 :time-grid t
           :deadline today)
	  (:name "Due soon"
		 :deadline future)
	  (:name "Overdue"
		 :deadline past)
	  (:name "Backlog"
		 :scheduled past)
	  (:name "Blocked/Waiting"
		 :todo "WAITING"
		 :order 98)
	  (:name "Back-burner"
		 :todo ("MAYBE")
		 :order 100)))

  ;; Source: https://stackoverflow.com/a/35905794
  (setq org-agenda-prefix-format 
	'((todo . "  %-14t%-32b")
	  (agenda . " %14t %12c %-15(concat \"[\" (org-format-outline-path (list (nth 0 (org-get-outline-path)))) \"]\") "))))
#+END_SRC
#+END_EXAMPLE
*** inline images
#+BEGIN_SRC emacs-lisp :noweb-ref org-inline-images :tangle no
;; Let me resize them plz!
(setq org-image-actual-width '(500))
;; => if there is a #+ATTR.*: width="200", resize to 200,
;;     otherwise resize to 500 pixels wide
;; link credit: http://lists.gnu.org/archive/html/emacs-orgmode/2012-08/msg01388.html

;; By default, *do* display inline images
(setq org-startup-with-inline-images t)

;; TODO set this up
;; (use-package org-download)
#+END_SRC
*** Tweaks to tree behavior
Use shift+meta-<right>, to get lateral shifts (demotion/promotion) that apply to the whole subtree!
#+BEGIN_SRC emacs-lisp :noweb-ref org-tree-behavior :tangle no
;; Source: Spruce Bondera
(defun krista/org-cycle-current-subtree ()
  (interactive)
  (let ((old-tab-style org-cycle-emulate-tab))
    (setq org-cycle-emulate-tab nil)
    (org-cycle)
    (setq org-cycle-emulate-tab old-tab-style)))
(bind-key "C-<tab>" #'krista/org-cycle-current-subtree)
#+END_SRC
*** Quickly add source blocks
Example: Start a new elisp block in org mode by typing <el and then pressing TAB
#+BEGIN_SRC emacs-lisp :noweb-ref org-quick-source-blocks :tangle no
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("c" "#+BEGIN_SRC C\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("cs" "#+BEGIN_SRC csharp\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("txt" "#+BEGIN_SRC txt\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("css" "#+BEGIN_SRC css\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("cpp" "#+BEGIN_SRC C++\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC python\n?\n#+END_SRC" ""))
;; "Example" block for plaintext
(add-to-list 'org-structure-template-alist
             '("ex" "#+BEGIN_EXAMPLE \n?\n#+END_EXAMPLE" ""))
#+END_SRC
*** Babel / Languages
#+BEGIN_SRC emacs-lisp :noweb-ref org-babel-config :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (emacs-lisp . t)
   (C . t)
   (lisp . t)))
#+END_SRC
*** Links
Org link workflow:
1. save link to current location with C-c l
2. move to spot where I'd like to insert the link
3. C-c C-o to insert link
4. (TODO! Fix this annoyance:) delete the default string, because I
   basically never use the file path as the link description
5. type in my own description
6. carry on with my life
#+BEGIN_SRC emacs-lisp :noweb-ref org-links :tangle no
(defun org-link-describe (link desc)
  (if (file-exists-p link)
      desc
    (read-string "Description: " nil)))
(setf org-make-link-description-function #'org-link-describe)

;; Make it so you can follow links with RET
;; Source: https://orgmode.org/manual/Handling-links.html#Handling-links
(setq org-return-follows-link t)


;; Note: I like to be able to link to specific emails. This is
;; possible on macOS by copying the unique ID in an email (e.g.
;; <20180701182008.1.72CDCB49D189BF41@japan-rail-pass.com>⁩) and then
;; creating a link string like
;; message://<20180701182008.1.72CDCB49D189BF41@japan-rail-pass.com>⁩
;; See also: https://hints.macworld.com/article.php?story=20071118154803739
;;
;; I have set up my web browser to respect these links (i.e.
;; automatically open such links using the macOS Mail app). However,
;; emacs does not do such a good job of interpreting these links -- it
;; attempts to treat the link text as a reference to some headline in
;; the org doc. Not what I want!
;; 
;; This config tells emacs to open `message://` links in the macOS mail app
;;(setq org-file-apps
;;      '((auto-mode . emacs)
;;        ("message://" . "open -a Mail %s")))

;; Config: open `mailto` links in macOS Mail
;; (add-to-list 'org-link-abbrev-alist 
;;     '("email" . "message://%s"))

(defun insert-email-url ()
  "Ask for message id, insert a macOS email url"
  (interactive)
  (save-excursion
    (insert
     (concat "[[shell:open\%20-a\%20Mail\%20\"message://"
	     (read-string "Message ID (e.g. <2018070...118F41@gmail.com>⁩):")
	     "%E2%81%A9\""
	     "]["
	     (read-string "Description:")
	     "]]"))))
#+END_SRC
*** Org tables
Source: https://emacs.stackexchange.com/a/30871
#+BEGIN_SRC emacs-lisp :noweb-ref org-tables :tangle no
(defun org-table-wrap-to-width (width) 
  "Wrap current column to WIDTH."
  (interactive (list (read-number "Enter column width: ")))
  (org-table-check-inside-data-field)
  (org-table-align)

  (let (cline (ccol (org-table-current-column)) new-row-count (more t))
    (org-table-goto-line 1)
    (org-table-goto-column ccol)

    (while more
      (setq cline (org-table-current-line))

      ;; Cut current field
      (org-table-copy-region (point) (point) 'cut)

      ;; Justify for width
      (setq org-table-clip 
            (mapcar 'list (org-wrap (caar org-table-clip) width nil)))

      ;; Add new lines and fill
      (setq new-row-count (1- (length org-table-clip)))
      (if (> new-row-count 0)
          (org-table-insert-n-row-below new-row-count)) 
      (org-table-goto-line cline)
      (org-table-goto-column ccol)
      (org-table-paste-rectangle)
      (org-table-goto-line (+ cline new-row-count))

      ;; Move to next line
      (setq more (org-table-goto-line (+ cline new-row-count 1)))
      (org-table-goto-column ccol))

    (org-table-goto-line 1)
    (org-table-goto-column ccol)))

;; ;; Default cell width
;; (setq org-cell-fill-column 50)

;; ;; Define a dwim, so the regular binding for M-q still works when I'm not in an
;; ;; org-table data field
;; (defun org-table-fill-dwim
;;     (if (org-table-check-inside-data-field)
;;         (org-table-wrap-to-width)
;;       (fill-paragraph)))

;; (add-hook 'org-mode-hook
;;           (lambda () (bind-key "M-q" #'org-table-fill-dwim)))

(defun org-table-insert-n-row-below (n)
  "Insert N new lines below the current."
  (let* ((line (buffer-substring (point-at-bol) (point-at-eol)))
         (new (org-table-clean-line line)))
    ;; Fix the first field if necessary
    (if (string-match "^[ \t]*| *[#$] *|" line)
        (setq new (replace-match (match-string 0 line) t t new)))
    (beginning-of-line 2)
    (setq new
      (apply 'concat (make-list n (concat new "\n"))))
    (let (org-table-may-need-update) (insert-before-markers new))  ;;; remove? 
    (beginning-of-line 0)
    (re-search-forward "| ?" (point-at-eol) t)
    (and (or org-table-may-need-update org-table-overlay-coordinates) ;;; remove? 
         (org-table-align))
    (org-table-fix-formulas "@" nil (1- (org-table-current-dline)) n)))

;; (global-set-key (kbd "C-c M-q") org-table-))
#+END_SRC
*** markdown as org mode
Remark: this requires config
Credit: the fabulous Spruce Bondera
#+BEGIN_SRC emacs-lisp :noweb-ref markdown-as-org :tangle no
(defun spruce/edit-markdown-as-org ()
  (interactive)
  (save-buffer)
  (let* ((filename (buffer-file-name))
         (org-buffer-name (concat (file-name-base filename) ".org"))
         (org-buffer (generate-new-buffer org-buffer-name)))
    (shell-command (format "pandoc %s -f markdown -t org" filename)
                   org-buffer)
    (with-current-buffer org-buffer
      (org-mode))))
#+END_SRC
** Calfw
CAL-endar F-rameW-ork
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :defer t
  :config 

  (use-package calfw-org
    :config
    (setq cfw:org-overwrite-default-keybinding t)
    (bind-key "H-c" #'cfw:open-org-calendar))

  ;; Unicode characters
  ;; (setq cfw:fchar-junction ?╋
  ;;       cfw:fchar-vertical-line ?┃
  ;;       cfw:fchar-horizontal-line ?━
  ;;       cfw:fchar-left-junction ?┣
  ;;       cfw:fchar-right-junction ?┫
  ;;       cfw:fchar-top-junction ?┯
  ;;       cfw:fchar-top-left-corner ?┏
  ;;       cfw:fchar-top-right-corner ?┓)
  (setq cfw:fchar-junction ?╬
        cfw:fchar-vertical-line ?║
        cfw:fchar-horizontal-line ?═
        cfw:fchar-left-junction ?╠
        cfw:fchar-right-junction ?╣
        cfw:fchar-top-junction ?╦
        cfw:fchar-top-left-corner ?╔
        cfw:fchar-top-right-corner ?╗)

  (setq cfw:render-line-breaker 'cfw:render-line-breaker-none))

#+END_SRC
** org-gcal
- https://github.com/myuhe/org-gcal.el
- http://cestlaz.github.io/posts/using-emacs-26-gcal/
- note regarding synchronization issues:
  - https://github.com/myuhe/org-gcal.el/issues/82
  - tl;dr
    #+BEGIN_EXAMPLE 
    # In the shell
    rm -rf ~/.emacs.d/org-gcal/.org-gcal-token

    # In emacs, eval this:
    (org-gcal-request-token)
    #+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :defer t
  :ensure t
  :config
  (setq org-gcal-file-alist (list (cons "victorsenkrista@gmail.com" krista/gcal-file)))
  (defun krista/org-gcal-pull ()
    "Do both a `gcal-fetch' and a `gcal-sync' (akin to git `merge')."
    (interactive)
    (org-gcal-fetch)
    (org-gcal-sync)))

;; Sync org-gcal when loading agenda mode
;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; Sync org-gcal after capturing. This is handy for recording events
;; in org mode via capture, although I'm not using it at this time
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+END_SRC
** Ivy/Swiper/Counsel
- Comparison with helm
  - Ivy
    - Like Helm
    - Standalone package
  - Swiper
    - Like Helm swoop
    - Relies on Ivy
  - Counsel
  - Like Helm descbinds + Helm persistent action
  - Relies on Swiper + Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  ;; :bind
  ;; (:map ivy-mode-map
  ;;  ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)

  ;; if t: add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)

  ;; number of result lines to display
  (setq ivy-height 20)

  ;; does not count candidates
  ;; (setq ivy-count-format "")

  ;; if nil: no regexp by default / remove initial ^ input.
  (setq ivy-initial-inputs-alist nil)

  ;; configure regexp engine.
  (setq ivy-re-builders-alist '((t . ivy--regex-plus)
                                (t . ivy--regex-fuzzy)
                                (t   . ivy--regex-ignore-order)))

  (setq enable-recursive-minibuffers t)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "(%d/%d) ")

  (global-set-key (kbd "C-s") 'swiper)
  ;; Resume ivy session
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-I") 'counsel-imenu)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-h b") 'counsel-descbinds)
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  (global-set-key (kbd "C-h F") 'counsel-describe-face)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S") 'counsel-grep-or-swiper)
  (global-set-key (kbd "C-x C-r") 'counsel-recentf)
  (global-set-key (kbd "C-c C-j") 'counsel-org-goto)
  (setq counsel-grep-base-command "grep -Ei -n -e %s %s")
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  (global-set-key [remap switch-to-buffer] 'ivy-switch-buffer)
  )

;; I used Helm before using Ivy, so I still have the muscle memory C-l to move
;; up a directory. This snippet allows me to bind C-l to interact helm-style
;; Source: https://github.com/abo-abo/swiper/issues/1257
(defun ivy-backward-directory ()
  "Forward to `kill-start-of-line'.
On error (read-only), call `ivy-on-del-error-function'."
  (interactive)
  (if (and ivy--directory (= (minibuffer-prompt-end) (point)))
      (progn
        (let ((old-dir (file-name-nondirectory
                        (directory-file-name ivy--directory)))
              idx)
          (ivy--cd (file-name-directory
                    (directory-file-name
                     (expand-file-name
                      ivy--directory))))
          (ivy--exhibit)
          (when (setq idx (cl-position
                           (file-name-as-directory old-dir)
                           ivy--old-cands
                           :test 'equal))
            (ivy-set-index idx))))
    (condition-case nil
        (kill-start-of-line) ; a little different here
      (error
       (when ivy-on-del-error-function
         (funcall ivy-on-del-error-function))))))


;; Ivy interface for bookmarks
;; Source: http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html
;; (defun ivy-bookmark-goto ()
;;   "Open ANY bookmark"
;;   (interactive)
;;   (let (bookmarks filename)
;;     ;; load bookmarks
;;     (unless (featurep 'bookmark)
;;       (require 'bookmark))
;;     (bookmark-maybe-load-default-file)
;;     (setq bookmarks (and (boundp 'bookmark-alist) bookmark-alist))

;;     ;; do the real thing
;;     (ivy-read "bookmarks:"
;;               (delq nil (mapcar (lambda (bookmark)
;;                                   (let (key)
;;                                     ;; build key which will be displayed
;;                                     (cond
;;                                      ((and (assoc 'filename bookmark) (cdr (assoc 'filename bookmark)))
;;                                       (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'filename bookmark)))))
;;                                      ((and (assoc 'location bookmark) (cdr (assoc 'location bookmark)))
;;                                       ;; bmkp-jump-w3m is from bookmark+
;;                                       (unless (featurep 'bookmark+)
;;                                         (require 'bookmark+))
;;                                       (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'location bookmark)))))
;;                                      (t
;;                                       (setq key (car bookmark))))
;;                                     ;; re-shape the data so full bookmark be passed to ivy-read:action
;;                                     (cons key bookmark)))
;;                                 bookmarks))
;;               :action (lambda (bookmark)
;;                         (bookmark-jump bookmark)))
;;     ))
;; (bind-key "C-x r l" #'ivy-bookmark-goto)

;; Make ivy play nice with "C-c C-w" (org-refile)
;; Source: https://github.com/abo-abo/swiper/issues/986#issuecomment-300482804
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)

(eval-after-load 'ivy
  '(progn
     (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-backward-directory)))
#+END_SRC
** Company
*** company (COM-plete ANY-thing)
DEADLINE: <2018-02-07 Wed>
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading company...")
(use-package company 
  :defer t
  :diminish
  :config
  (global-company-mode)
  ;; Trigger suggestions faster (default value: 0.5 (seconds))
  (setq company-idle-delay 0.1)
  :bind (("C-;" . company-complete-selection)))


;; Backends
(use-package company-irony   :defer t)
(use-package company-c-headers   :defer t)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-irony)
  (add-to-list 'company-backends 'company-c-headers)
  ;; Scroll through completion options with C-n and C-p (instead of M-n
  ;; and M-p)
  ;; Source: https://emacs.stackexchange.com/a/2990
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading projectile...")
(use-package projectile
  :defer t
  :diminish
  :config
  (setq projectile-completion-system 'ivy)
  (projectile-mode)
  <<counsel-projectile>>
  )
#+END_SRC
*** counsel projectile
#+BEGIN_SRC emacs-lisp :noweb-ref counsel-projectile :tangle yes
(use-package counsel-projectile
  :defer t
  :diminish
  :config
  (counsel-projectile-mode))
#+END_SRC
** Magit
*** [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git][Magit tutorial]]
*** Config
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading magit...")
(use-package magit
  :config
  <<magit-color-scheme>>
  ;; Default arguments to magit log
  ;; (setq magit-log-arguments '("-n150" "--graph" "--decorate" "--color"))
  :bind
  (("C-c g" . magit-status)))
#+END_SRC
*** Color scheme
Note: "vc" stands for *V*-ersion *C*-ontrol
#+BEGIN_SRC emacs-lisp :noweb-ref magit-color-scheme :tangle no
(setq vc-annotate-background nil)
(setq vc-annotate-color-map
      (quote
       ((20 . "#f2777a")
        (40 . "#f99157")
        (60 . "#ffcc66")
        (80 . "#99cc99")
        (100 . "#66cccc")
        (120 . "#6699cc")
        (140 . "#cc99cc")
        (160 . "#f2777a")
        (180 . "#f99157")
        (200 . "#ffcc66")
        (220 . "#99cc99")
        (240 . "#66cccc")
        (260 . "#6699cc")
        (280 . "#cc99cc")
        (300 . "#f2777a")
        (320 . "#f99157")
        (340 . "#ffcc66")
        (360 . "#99cc99"))))
(setq vc-annotate-very-old-color nil)
#+END_SRC
* Minor packages
** bookmark+ (bmkp)
Note: use "P-F" to filter by file name
#+BEGIN_SRC emacs-lisp
(use-package bookmark+
  :defer t
  :config
  (setq bmkp-incremental-filter-delay 0.05))
#+END_SRC
** paradox
Paradox is better package management
#+BEGIN_SRC emacs-lisp
;; Speedy-open melpa
(use-package paradox
  :defer 10
  ;; :bind (("H-P" . paradox-list-packages))
  )
;; Set to t => Don't ask me to integrate with github every time I want to look
;; at melpa!
(with-eval-after-load 'paradox (setq paradox-github-token t))
#+END_SRC
** Yasnippet
*** [[https://github.com/joaotavora/yasnippet/blob/master/README.mdown][Github]]
*** [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][Cup Full of Code tutorial (example starter snippets)]]
*** [[https://joaotavora.github.io/yasnippet/snippet-organization.html#sec-1][Joatoavora tutorial (better)]]
*** Configuration
#+BEGIN_SRC emacs-lisp
;; (message "[krista] Loading yasnippet...")
;; (use-package yasnippet
;;   :defer t
;;   :diminish yas-minor-mode
;;   :config
;;   (yas-global-mode 1)
;;   :bind
;;   ("H-y" . yas-insert-snippet))
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind
  ("M-P" . ace-window)
  :config
  (setq aw-dispatch-always t))
#+END_SRC
** Shackle
https://github.com/wasamasa/shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle 
  :config
  (setq shackle-default-alignment 'below)
  (setq shackle-default-rule
        '(:select t ; Select the popped-up window
          :popup t ; Pop up a new window instead of displaying the buffer in the current one.
          :same nil ; Display buffer in a NEW window.
          ;; :size 0.4 ; occupy 40% of the old window
          ))
  (setq shackle-rules
        '(("\\*Org Src.*"            :align right :select t   :popup t :same nil :regexp t :size 0.5)
          (" *Org todo*"             :align below :select t   :popup t :same nil)
          (" *Org tags*"             :align below :select t   :popup t :same nil)
          (" *Agenda Commands*"      :align below :select t   :popup t :same nil)
          ("*Org Note*"              :align below :select t   :popup t :same nil)
          ("CAPTURE.*"               :align below :select t   :popup t :same nil :regexp t)
          ("*Org Select*"            :align below :select t   :popup t :same nil)
          ;; (" *Org Links*"            :align below             :popup t :same nil :size 0.1)
          ;; ("*Select Link*"           :align below :select t   :popup t :same nil)
          ("*Org Clock*"             :align below :select t   :popup t :same nil)
          ("*Edit Formulas*"         :align below :select t   :popup t :same nil)
          ("*Org Attach*"            :align below :select t   :popup t :same nil)
          ("*Org Export Dispatcher*" :align below :select t   :popup t :same nil)
          ))


  ;; Make org-mode listen to shackle
  ;; Source: https://emacs.stackexchange.com/a/31634
  (setq org-src-window-setup 'other-window)
  ;;
  ;; Re-define org-switch-to-buffer-other-window to NOT use org-no-popups.
  ;; Primarily for compatibility with shackle.
  (defun org-switch-to-buffer-other-window (args)
    "Switch to buffer in a second window on the current frame.
    In particular, do not allow pop-up frames.
    Returns the newly created buffer.
    Redefined to allow pop-up windows."
    ;;  (org-no-popups
    ;;     (apply 'switch-to-buffer-other-window args)))
    (switch-to-buffer-other-window args)


    ;; Source: https://github.com/sk8ingdom/.emacs.d/blob/9d2f40c261864533df59be452117941a7f9b3e3f/general-config/general-plugins.el
    ;; Function to suppress delete-other-windows in functions
    (defun my/suppress-delete-other-windows (old-fun &rest args)
      (cl-flet ((silence (&rest args) (ignore)))
        (advice-add 'delete-other-windows :around #'silence)
        (unwind-protect
            (apply old-fun args)
          (advice-remove 'delete-other-windows #'silence))))
    ;;
    ;; Adds my/suppress-delete-other-windows to org-mode functions for compatibility with shackle
    (advice-add 'org-capture-place-template :around #'my/suppress-delete-other-windows)
    (advice-add 'org-agenda :around #'my/suppress-delete-other-windows)
    (advice-add 'org-add-log-note :around #'my/suppress-delete-other-windows)
    (advice-add 'org-todo :around #'my/suppress-delete-other-windows)
    (advice-add 'org-set-tags-command :around #'my/suppress-delete-other-windows)
    ;; (advice-add 'org-insert-link :around #'my/suppress-delete-other-windows)
    )

  ;; Enable shackle-mode globally
  (shackle-mode 1))
#+END_SRC
** Undo tree
Docs: <http://www.dr-qubit.org/undo-tree/undo-tree-0.6.4.el>
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading undo-tree...")
(require 'undo-tree)
(setq undo-tree-auto-save-history t)
(add-to-list 'undo-tree-history-directory-alist
             '("." . "~/.emacs.d/cache/undo/"))

;; WARNING!!! This line must appear /after/ setting variables to save undo-tree
;; history!!!
(global-undo-tree-mode)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer 2
  :diminish
  :init (global-flycheck-mode)
  :custom
  (flycheck-display-errors-delay .75))
;; Permanently enable syntax checking
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC
*** Usage
via http://www.flycheck.org/en/latest/user/quickstart.html#enable-
- =C-c ! n=: go forward to next error
- =C-c ! p=: go backward to prev. error
- =C-c ! l=: show a popup list of errors
** Transpose-frame
Provides 
- flip-frame
- transpose-frame
- flop-frame
#+BEGIN_SRC emacs-lisp
(use-package transpose-frame   :defer t)
#+END_SRC
** Smartparens
This config is adapted from Spruce Bondera's .emacs.d
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer t
  :config
  ;; Enable the default config
  (require 'smartparens-config)

  ;; There's several modes in which I usually prefer strings to be treated
  ;; similar to s-expressions. In others its less relevant/string literals are
  ;; less common.
  ;;(setq sp-navigate-consider-stringlike-sexp
  ;;      (append sp-navigate-consider-stringlike-sexp (list 'python-mode
  ;;                                                         'org-mode
  ;;                                                         'coffeescript-mode)))

  ;; This overlay ended up being on basically all the time and overriding my
  ;; syntax highlighting. More distracting than helpful.

  ;; From the docs:
  ;; If non-nil, autoinserted pairs are highlighted while point is inside the pair.
  (setq sp-highlight-pair-overlay nil)

  ;; smartparens will automatically escape quotes, so if you type this:
  ;;     "The expression of the day is My Expression!"
  ;;
  ;; and then try to highlight and quote "My Expression!", you'll get this:
  ;;     "The expression of the day is \"My Expression!\""
  ;;
  ;; I don't like that. This line turns it off.
  (setq sp-escape-quotes-after-insert nil)

  ;; https://smartparens.readthedocs.io/en/latest/pair-management.html
  (sp-pair "$" "$")   ;; latex inline math mode. Pairs can have same opening and closing string

  :bind (("C-M-f" . sp-forward-sexp)
         ("C-M-b" . sp-backward-sexp)
         ("C-M-u" . sp-backward-up-sexp)
         ("C-M-d" . sp-down-sexp)
         ("C-M-a" . sp-backward-down-sexp)
         ("C-M-e" . sp-forward-up-sexp)
         ("C-M-n" . sp-beginning-of-next-sexp)
         ("C-M-p" . sp-beginning-of-previous-sexp)
         ;; Unwrap, or remove the parens/outer pair from the current s-exp
         ("C-M-<backspace>" . sp-unwrap-sexp)))

;; Enable smartparens globally
(smartparens-global-mode)
#+END_SRC
** Multi-web mode
#+BEGIN_SRC emacs-lisp
(use-package multi-web-mode
  :defer t
  :config
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (multi-web-global-mode 1))
#+END_SRC
** Dumb-jump
- Keybindings: 
  - C-M-g : dumb-jump go
  - C-M-p : dumb-jump prev.
  - C-M-q : dumb-jump quick look
Visual studio has a "Go to definition" option in the context menu. It's nice. Gimme!
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer t
  :config
  (dumb-jump-mode 1)
  (setq dumb-jump-prefer-searcher 'rg))
#+END_SRC
** Hide-show mode
- Keybindings: https://www.emacswiki.org/emacs/HideShow
- hs == short for hide-show
#+BEGIN_SRC emacs-lisp
;; (hs-minor-mode)
(load-library "hideshow")
(global-set-key (kbd "C--") 'hs-toggle-hiding)
(global-set-key (kbd "C-M--") 'hs-hide-all)
(global-set-key (kbd "C-M-=") 'hs-show-all)
(add-hook 'c-mode-common-hook 'hs-minor-mode)
(add-hook 'cc-mode-hook 'hs-minor-mode)
(add-hook 'csharp-mode-hook 'hs-minor-mode)
#+END_SRC
** Rainbow-parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters   :defer 10)
#+END_SRC
** Which-key
#+BEGIN_SRC emacs-lisp
(message "[krista] loading which-key...")
(use-package which-key              ;;; Display available keybindings in popup
  :diminish which-key-mode
  :defer 5
  :config
  (setq which-key-idle-delay 1.5))
(with-eval-after-load 'which-key
  (which-key-mode))
#+END_SRC
* Programming
** Whitespace preferences
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading whitespace preferences...")
(setq tab-width 4)

;;(use-package whitespace)

;; Show trailing whitespace by default
;; (setq-default show-trailing-whitespace nil)
;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
;; ... but don't show trailing whitespace if I'm in
;; - a minibuffer
;; - help mode
;; - in a makefile
(defun hide-trailing-whitespace () (setq show-trailing-whitespace nil))

(add-hook 'minibuffer-setup-hook
          'hide-trailing-whitespace)
(add-hook 'help-mode-hook
          'hide-trailing-whitespace)
(add-hook 'compilation-mode-hook
          'hide-trailing-whitespace)
(add-hook 'makefile-mode-hook
          'hide-trailing-whitespace)
(add-hook 'text-mode-hook
          'hide-trailing-whitespace)
;; Function hide-trailing-whitespace is adapted from
;; the function no-trailing-whitespace, available:
;; https://ogbe.net/emacsconfig.html

;; This is commented out because it automatically cleans up whitespace on save
;; This can be a pain when collaborating with other people, so I have it disabled by default
;; TODO: set up to auto-enable or disable based on number of collaborators

;; (add-hook 'python-mode-hook 'whitespace-mode)
;; (setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab lines))
;; (setq whitespace-action '(auto-cleanup))
#+END_SRC
** Programming languages
*** C / C++
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading cc-mode...")
(use-package cc-mode
  :defer t
  :config
  ;; This function matches any existing whitespace style that can be found
  ;; Source: Spruce Bondera's config
  (with-eval-after-load 'dtrt-indent
    (add-hook 'c-mode-common-hook
              (lambda () (dtrt-indent-mode t))))
  :bind (:map
         c-mode-base-map
         ("C-c b" . compile)
         ("M-j" . join-line)))

(use-package cpputils-cmake
  :defer t
  :config
  (add-hook 'c-mode-common-hook
            (lambda ()
              (if (derived-mode-p 'c-mode 'c++-mode)
                  (cppcm-reload-all)))))


(c-add-style "krista-style"             ; title
             '("python"                 ; inherit from the python style
               (indent-tabs-mode . nil) ; indents: use spaces, not tabs
               (c-basic-offset . 4)     ; indents: 4 chars wide
               (fill-column . 80)))     ; when to wrap line? (In chars)
(setq c-default-style "krista-style")

(use-package modern-cpp-font-lock   :defer t)
(add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)

;; (defface font-lock-operator-face
;;   '((((class color)
;;        :background "darkseagreen2")))
;;   "Basic face for highlighting."
;;   :group 'basic-faces)

;; ;; You'll have a hard time missing these colors
;; (set-face-foreground 'font-lock-operator-face "red")
;; (set-face-background 'font-lock-operator-face "blue")

;; (font-lock-add-keywords 'c++-mode
;;   '(("\\(~:^&\|!<>:=,.?\\+*/%-]\\)" 0 'font-lock-operator-face)))
#+END_SRC
*** Python
**** Pylint minor mode
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading python config...")
(autoload 'pylint "pylint")
(add-hook 'python-mode-hook 'pylint-add-menu-items)
(add-hook 'python-mode-hook 'pylint-add-key-bindings)
#+END_SRC
**** Python shell interpreter
- Problem: When I ran =run-python=, I got the following error message:
  - Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to
    support readline, yet ‘python-shell-completion-native’ was t and
    "python" is not part of the
    ‘python-shell-completion-native-disabled-interpreters’ list.
    Native completions have been disabled locally.
- Solution (via [[https://emacs.stackexchange.com/a/30970][this]]):
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
  #+END_SRC
**** Press <tab> to indent with 2 spaces
#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (setq tab-width 2)
            (setq python-indent 2)))
#+END_SRC
*** Slime (lisp)
#+BEGIN_SRC emacs-lisp
;; Quicklisp install and this config from https://gist.github.com/jteneycke/7947353
;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;; (setq inferior-lisp-program "/usr/local/bin/sbcl")
;; (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
;; (add-hook 'slime-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
*** haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :defer t)
#+END_SRC
*** C#
#+BEGIN_SRC emacs-lisp
(use-package csharp-mode
  :defer t
  :config

  ;; TODO: try removing this. Spruce said that it's unnecessary -- should look into that
  (autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
  (setq auto-mode-alist
        (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))

  :bind
  ("C-c C-c" . recompile))

;; Csharp mode Whitespace preferences
(c-add-style "krista-csharp-style"      ; title
             '("python"                 ; inherit from the python style
               (indent-tabs-mode . nil) ; indents: use spaces, not tabs
               (c-basic-offset . 4)     ; indents: 4 chars wide
               (fill-column . 80)))     ; when to wrap line? (In chars)

(add-hook 'csharp-mode-hook (lambda () (c-set-style "krista-csharp-style")))
;; TODO: Set default csharp style
;; (add-hook  'csharp-mode-hook 'my-csharp-mode t)

(add-hook 'csharp-mode-hook 'omnisharp-mode)
(eval-after-load
    'company
  '(add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
* Hydra
Putting hydra after most config (for now) because I'm not sure how
best to structure hydra config
See also: https://github.com/abo-abo/hydra#the-one-with-the-least-amount-of-code
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer 5
  :bind ("C-c f" . hydra-flycheck/body))

(defhydra hydra-flycheck (:color blue)
  "
  ^
  ^Flycheck^          ^Errors^            ^Checker^
  ^────────^──────────^──────^────────────^───────^─────
  _q_ quit            _<_ previous        _?_ describe
  _M_ manual          _>_ next            _d_ disable
  _v_ verify setup    _f_ check           _m_ mode
  ^^                  _l_ list            _s_ select
  ^^                  ^^                  ^^
  "
  ("q" nil)
  ("<" flycheck-previous-error :color pink)
  (">" flycheck-next-error :color pink)
  ("?" flycheck-describe-checker)
  ("M" flycheck-manual)
  ("d" flycheck-disable-checker)
  ("f" flycheck-buffer)
  ("l" flycheck-list-errors)
  ("m" flycheck-mode)
  ("s" flycheck-select-checker)
  ("v" flycheck-verify-setup))
#+END_SRC
* Getting help
This section is not part of my config file per say, but contains instructions
for getting help with various parts of emacs
** How-to's
*** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html][Keybinding instructions]]
*** How to edit source code in org-mode file
- New code block:
  - New source block (lang unspecified): <s [TAB]
  - New elisp block: <el [TAB]
- Edit code block: C-c'
*** Embed an image in an org document
#+BEGIN_EXAMPLE
,#+CAPTION: This is the caption for the next figure link (or table)
,#+attr_org: :width="50px"
,#+NAME:   figure
[[file:./my_image.png]]
#+END_EXAMPLE
*** Select all: C-x h
*** Moving a file into the 'literate' directory:
Suppose you made a file called =new-thing=
#+BEGIN_EXAMPLE 
;; Macro to define a new external tangling file:
(krista/new-config-file new-thing "new-thing")
;; Actually load the external file:
'(org-babel-load-file krista/my-new-config-file)
#+END_EXAMPLE
** Troubleshooting your config file
If you don't know why your emacs is breaking, but suspect a tangling
issue, then CHECK CONFIG.EL
** Helpful resources
*** Within emacs
- =M-x describe-[key, face, mode, etc.]=
  - =C-h [k, o, f, m]=: Quick keybindings for the describe-.* functions
- Custom help written by me: [[*Cheatsheet]]
*** Online
- http://pages.sachachua.com/.emacs.d/Sacha.html
- http://ergoemacs.org/emacs/emacs.html
- https://emacsdojo.github.io/
* Further plans
** Add submodules for repos that are not on MELPA
*** https://github.com/novoid/title-capitalization.el
** TODO Gtd goals
https://github.com/jethrokuan/.emacs.d/blob/master/config.org#org-mode-for-gtd
** Improvements to org mode
*** TODO meta: check out melpa packages for "org-$PACKAGENAME"
*** TODO org gcal
https://github.com/myuhe/org-gcal.el
*** TODO org dotemacs
Summary: Store your emacs config as an org file, and choose which bits to load.
Requires: org-7.9.3, cl-lib-1.0
Homepage: https://github.com/vapniks/org-dotemacs
*** TODO better priorities
Summary: Display org priorities as custom strings
Homepage: https://github.com/harrybournis/org-fancy-priorities
*** TODO org context
**** package option: org-context
https://github.com/thisirs/org-context
**** package option: org-category-capture
https://github.com/IvanMalison/org-projectile
This package provides an interface that can be used to capture TODOs with a
category that is selected depending on a some piece of Emacs context.
*** TODO org doing
org-doing
Summary: Keep track of what you're doing
Homepage: https://github.com/omouse/org-doing
*** TODO org redmine
Summary: Redmine tools using Emacs OrgMode
Homepage: https://github.com/gongo/org-redmine
** TODO Kinesis-specific keyboard issues
- My hands were hurting after long typing sessions. As a computer
  science student, I forsaw this as being a potentially-huge problem
  later on in life. So I decided to get a Kinesis Advantage 2 while I
  was still young, springy, and stupid enough to consider adapting my
  muscle memory to a new keyboard style. (...but fuck Dvorak. I ain't
  crazy enough for Dvorak.) 2 weeks later, my new Kinesis arrived. I
  plugged her into my Mac, and with a perverse glee, I started up
  Emacs to see what was broken. Here, I shall document those things.
- First, I live in the U.S. This keyboard therefore shipped with a
  P.C. layout. I followed the instructions for "Mac Mode", as per
  the quickstart guide. It should be noted that before switching, my
  layout was modified from the stock OS X layout as follows:
- Global modifications:
** TODO Integrated compiler / version control / logging facility
- I've noticed that when coding in a compiled language such as C/C++,
  I often end up in this workflow:
  - Type some stuff
  - Save
  - Try compiling
  - If compiler errors
    - Make note of what's wrong
    - Try to solve the problem
    - Try compiling again
- It would be nice to be able to record the flow of [compiler error /
  troubleshooting idea / fix] for the purposes of version control
- I want a package that will let me have a debugging diary which will
  archive my code, compiler output, and any thoughts that i'd like to
  record.
- Ideally, the package would output an org doc with an undo-tree -like
  interface for retracing my steps in debugging
** TODO Set up steam integration with emacs
** TODO spotify controls in emacs
** TODO install & configure hackernews mode
** TODO Emacs/W3
#+BEGIN_SRC emacs-lisp
;; (setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
;; (condition-case () (require 'w3-auto "w3-auto") (error nil))
#+END_SRC
** TODO multiple-cursors
#+BEGIN_SRC emacs-lisp
;; (use-package multiple-cursors
;;  :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+END_SRC
** TODO Add more to yasnippet
** TODO Install the alert package
- provides Growl-like notifications
- would be useful for org-calendar
** TODO Install winner, windmove
See https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org
