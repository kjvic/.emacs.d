#+TITLE: Krista Victorsen's Emacs configuration
#+AUTHOR: Krista Victorsen
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2
* Bootstrap
 Get emacs off the ground!
** Load-path
*** Config
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elisp/")
(add-to-list 'load-path (concat user-emacs-directory "literate/tron-doom/"))
#+END_SRC
** use-package: package management management
[[https://github.com/jwiegley/use-package][use-package github]]
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  ;; Update the package if it needs updating.
  ;; NOTE: This contacts melpa every time you reload your config. Overhead!
  ;; (package-refresh-contents)
  (package-install 'use-package))
(require 'use-package)
;; All packages in a use-package macro should be automagically installed
(setq use-package-always-ensure t)
#+END_SRC
** Byte-compile external files (if necessary)
- How to byte-compile your entire .emacs.d from the command line:
  #+BEGIN_EXAMPLE 
  emacs -batch -f batch-byte-compile ~/.emacs.d/**/*.el
  #+END_EXAMPLE
  - [[http://emacsredux.com/blog/2013/06/25/boost-performance-by-leveraging-byte-compilation/][Source]]
- auto-compile mode
  #+BEGIN_SRC emacs-lisp
  ;;; init.el --- user init file      -*- no-byte-compile: t -*-
  (use-package auto-compile
    ;; NOTE: This will only re-compile existing .elc files, so you must
    ;; run the shell command above for one-time install on new machines
    :config (auto-compile-on-load-mode))
  (setq load-prefer-newer t)
  #+END_SRC
** Literate programming support
- NOTE: you /must/ have each tangle block on a new line in order for it
  to be tangled correctly!!!!
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
*** Tangling helpers
#+BEGIN_SRC emacs-lisp
(setq-default krista/org-config-directory "literate")
(setq-default krista/org-config-dirpath
              (expand-file-name (concat user-emacs-directory
                                        krista/org-config-directory)))
(add-to-list 'load-path krista/org-config-dirpath)
(setq-default krista/config-org-files nil)

;; transforms the given name to "krista/name-config-file" and sets it
;; to the given org filename
(defmacro krista/new-config-file (name filename)
  (let ((full-file (make-symbol "full-filename")))
    `(let ((,full-file
            (concat (file-name-as-directory krista/org-config-dirpath)  ,filename ".org")))
       (defvar ,(intern (concat "krista/" (symbol-name name) "-config-file"))
         ,full-file)
       (add-to-list
        (quote krista/config-org-files) (quote (,name . ,filename)) t))))
#+END_SRC
*** Now actually tangle the external files
- NOTE: It is important that use-package has been loaded before this
  block is executed
- This is because my external files have "use-package" statements,
  which won't work if use-package hasn't been loaded yet!
**** OS-specific config
#+BEGIN_SRC emacs-lisp
(krista/new-config-file macOS "macOS")
(krista/new-config-file windows "windows")
(cond ((eq system-type 'darwin)
       (org-babel-load-file krista/macOS-config-file))
      ((member system-type '(ms-dos windows-nt cygwin))
       (org-babel-load-file krista/windows-config-file)))
#+END_SRC
**** Modeline
#+BEGIN_SRC emacs-lisp
(krista/new-config-file modeline "modeline")
(org-babel-load-file krista/modeline-config-file)
#+END_SRC
** Initial buffer to show at startup
- When I start up emacs, I don't want to see the ugly default startup
  screen. However, I also want to be able to run =emacs somefile.txt=
  and start editing =somefile.txt= right away. As a compromise, I check
  if there were arguments passed in to emacs at startup. If not, set
  the initial-buffer-choice to my core directory.
  - [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Entering-Emacs.html#Entering-Emacs][More on initial buffers]]
  - [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html][More on command line arguments]]
- Config (via [[https://emacs.stackexchange.com/a/21106][stackexchange]])
  #+BEGIN_SRC emacs-lisp
  (setq krista/orgzly-dir "~/Dropbox/orgzly/")
  (setq krista/todo-file (concat krista/orgzly-dir "todo.org"))
  (setq krista/at-a-glance-file (concat krista/orgzly-dir "at-a-glance.org"))
  (setq krista/schedule-file "~/core/school/umich/F17/schedule.png")
  (setq default-initial-buffer-choice krista/todo-file)
  (defun my-after-init-hook ()
    "Set initial buffer ONLY if no file is specified in command line args"
    (when (eq 1 (length command-line-args))
      (message "[krista] Setting initial buffer to default value")
      (setq initial-buffer-choice default-initial-buffer-choice)))
  (add-hook 'after-init-hook 'my-after-init-hook)
  #+END_SRC
* Tools for configuring emacs
This is where I put things that help me modify my emacs install more efficiently
** Quickly open, evaluate my config file
#+BEGIN_SRC emacs-lisp
(defun krista/speedy-open-config ()
  "Quickly open my config file"
  (interactive)
  (find-file (or "~/.emacs.d/config.org"
                 user-init-file "")))
(bind-key "C-c e" #'krista/speedy-open-config)

(defun krista/speedy-eval-config ()
  "Quickly evaluate my config file"
  (interactive)
  (load-file user-init-file))
(bind-key "C-c C-h" #'krista/speedy-eval-config)
#+END_SRC
** Evaluate a region, or the buffer (whatever's appropriate)
#+BEGIN_SRC emacs-lisp
(defun eval-region-or-buffer ()
  "Let me eval either a region or a buffer at a time"
  (interactive)
  (let ((debug-on-error t))
    (cond
     (mark-active
      (call-interactively 'eval-region)
      (message "Region evaluated!")
      (setq deactivate-mark t))
     (t
      (eval-buffer)
      (message "Buffer evaluated!")))))
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (bind-key "C-c C-b" #'eval-region-or-buffer)))
#+END_SRC
** Switch to *Messages* buffer
#+BEGIN_SRC emacs-lisp
(defun switch-to-messages-buffer ()
  "Open up the *Messages* buffer in a new frame"
  (interactive)
  (switch-to-buffer-other-window "*Messages*"))
(bind-key "C-c m" #'switch-to-messages-buffer)
#+END_SRC
** Record keyboard macros
#+BEGIN_SRC emacs-lisp
;; Start & end recording new keyboard macro
(bind-key "M-[" #'kmacro-start-macro)
(bind-key "M-]" #'kmacro-end-macro)
;; Call the last keyboard macro that was recorded
(bind-key "C-l" #'call-last-kbd-macro)
#+END_SRC
** Emacs achievements
- Unlock achievements to track your emacs journey
- [[https://bitbucket.org/gvol/emacs-achievements/src/5b4b7b6816aaf105cd493f51b3860bd2f0c014a6/README.md?at=default&fileviewer=file-view-default][Bitbucket]]
#+BEGIN_SRC emacs-lisp
(use-package achievements
  :diminish achievements-mode
  :config (achievements-mode t))
#+END_SRC
** Freekeys
#+BEGIN_SRC emacs-lisp
;; (use-package free-keys
;;   :bind ("M-F" . free-keys))
#+END_SRC
** Benchmark init
- Figure out where you're burning time!!!
- [[https://www.emacswiki.org/emacs/BenchmarkInit][docs]]
- config
  #+BEGIN_SRC emacs-lisp
  (require 'benchmark-init)
  #+END_SRC
** Make Customize sort colors in a way that makes sense to me
#+BEGIN_SRC emacs-lisp
(setq list-colors-sort 'luminance)
#+END_SRC
** Funnel settings from Customize into another file
#+BEGIN_SRC emacs-lisp
;; Save the pesky Custom options elsewhere! (i.e. in user-emacs-directory/custom.el)
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
;; Uncomment this ONLY if you want to see the pesky Custom options. They *are* saved, although they're not loaded
;; (load custom-file :noerror)
#+END_SRC
* Global settings
** Better defaults
*** Remove default startup message, text at the top of scratch buffers
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-scratch-message "")
(setq inhibit-startup-screen t)
#+END_SRC
*** Don't warn me before opening large files
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold nil)
#+END_SRC
*** Remove the default emacs toolbar (top of screen)
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
*** Hide the scrollbar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
*** When cursor is on a paren, highlight the other one 
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(setq show-paren-delay 0)
#+END_SRC
*** Put /relevant/ info in the title bar
Set the format for the title bar
- Disambiguation: 
  - An example [[https://cdn1.tekrevue.com/wp-content/uploads/2015/09/osx-finder-path-in-title-bar.jpg][window title bar]] in macOS
  - macOS calls this thing a "window title"
  - emacs calls this thing a "frame title"
- See also: https://www.emacswiki.org/emacs/FrameTitle
#+BEGIN_SRC emacs-lisp
;; %b - Buffer name
;; %m - Buffer mode
(setq frame-title-format '("%b - [%m]"))
#+END_SRC
*** Don't try to edit read-only portions of the minibuffer
Source: http://ergoemacs.org/emacs/emacs_stop_cursor_enter_prompt.html
#+BEGIN_SRC emacs-lisp
(customize-set-variable
 'minibuffer-prompt-properties
 (quote (read-only t cursor-intangible t face minibuffer-prompt)))
#+END_SRC
*** Don't litter working directory with backup files
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '((".*" . "~/.emacs.d/backup/"))    ; don't litter my filesystem
   delete-old-versions t
   kept-new-versions 50
   kept-old-versions 50
   version-control t)       ; use versioned backups
#+END_SRC
*** Don't litter working directory with autosave files
#+BEGIN_SRC emacs-lisp
(setq auto-save-file-prefix "~/.emacs.d/autosaves/.saves-")
(setq auto-save-interval 1000) ; 1000 characters
(setq auto-save-timeout 60)    ; or 60 seconds
#+END_SRC
*** Delete highlighted text if you start typing on top of it
#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC
*** Change "yes or no" prompts to "y or n" prompts
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Don't add 2 spaces after a period
#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC
*** Use 12-hour time with AM/PM instead of 24-hour time
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format nil)

;; Source: https://emacs.stackexchange.com/a/20819
(setq display-time-string-forms
      '(12-hours ":" minutes am-pm))
#+END_SRC
** Buffer management
See also: [[*Ace-window]]
*** Don't scroll a full screenful at a time
Keep some "context lines" around
#+BEGIN_SRC emacs-lisp
(setq next-screen-context-lines 3)
#+END_SRC
*** Cycle backwards through buffers
"C-x o", meet your new friend "C-c o"!
#+BEGIN_SRC emacs-lisp
(bind-key "C-c o" #'previous-multiframe-window)
#+END_SRC
*** Toggle fullscreen
Note: this resizes/maximizes the frame, but does not enter the OS's native fullscreen mode
#+BEGIN_SRC emacs-lisp
(bind-key "C-c C-<return>" #'toggle-frame-fullscreen)
#+END_SRC 
*** Forbid vertical splitting
https://stackoverflow.com/questions/24140672/how-can-i-make-ess-to-split-window-horizontally-by-default
Not quite what I want, but helpful
#+BEGIN_SRC emacs-lisp
;; (setq split-height-threshold nil)
;; (setq split-width-threshold 0)
#+END_SRC
*** New frame (new "window" in os x parlance)
#+BEGIN_SRC emacs-lisp
(bind-key "H-n" #'make-frame)
(bind-key "H-w" #'delete-frame)
(bind-key "H-o" #'reveal-in-osx-finder)
#+END_SRC
** Editing
- This section contains variable settings and functions.
- Rebind preexisting commands in [[*Global%20keybindings][*Global keybindings]]
*** Backwards kill-line
- It's the backwards version of C-k
- Note: M-k was originally bound to =kill-sentence=
- Source: https://www.emacswiki.org/emacs/BackwardKillLine
#+BEGIN_SRC emacs-lisp
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (kill-line (- 1 arg)))
(bind-key "M-k" #'backward-kill-line)
#+END_SRC
*** Make C-k kill the text AND newline
#+BEGIN_SRC emacs-lisp
(setq kill-whole-line t)
#+END_SRC
*** Transpose line up or down
#+BEGIN_SRC emacs-lisp
(defun move-line-up ()
  "Move up the current line."
  (interactive)
  (transpose-lines 1)
  (forward-line -2)
  (indent-according-to-mode))
(defun move-line-down ()
  "Move down the current line."
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1)
  (indent-according-to-mode))
(global-set-key (kbd "M-p")  'move-line-up)
(global-set-key (kbd "M-n")  'move-line-down)
#+END_SRC
*** Comment out the current line
Source: http://www.opensubscriber.com/message/emacs-devel@gnu.org/10971693.html
#+BEGIN_SRC emacs-lisp
(defun comment-dwim-line (&optional arg)
  "Replacement for the comment-dwim command.
       If no region is selected and current line is not blank and we are not at the end of the line,
       then comment current line.
       Replaces default behaviour of comment-dwim, when it inserts comment at the end of the line."
  (interactive "*P")
  (comment-normalize-vars)
  (if (and (not (region-active-p))
           (not (looking-at "[ \t]*$")))
      (comment-or-uncomment-region (line-beginning-position)
                                   (line-end-position))
    (comment-dwim arg)))
(bind-key "M-;" #'comment-dwim-line)
#+END_SRC
** Global keybindings
#+BEGIN_SRC emacs-lisp
;; Eval buffer
(bind-key "C-c b" #'eval-buffer)

;; Count words in selected region

(bind-key "C-c w" #'count-words)
;; 23 Mar 2016 - binds "M-j" to "M-x-join-line", as per
;; <http://stackoverflow.com/questions/1072662/by-emacs-how-to-join-two-lines-into-one>
(bind-key "M-j" #'join-line)

;; Unbind Ctrl+meta+<right>, Ctrl+meta+<left> so BTT can use that to
;;bring a window to a new desktop
(global-unset-key (kbd "C-M-<left>"))
(global-unset-key (kbd "C-M-<right>"))
#+END_SRC
** Enable hidden commands
#+BEGIN_SRC emacs-lisp
;; Enable "C-x u" for upcase-region, "C-x l" for downcase-region
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
#+END_SRC
** Shell / filesystem
*** Tramp
#+BEGIN_SRC emacs-lisp
(use-package tramp
  :config
  (setq tramp-default-method "ssh")

  ;; Make tramp actually read my PATH variable
  ;; NOTE: needed to restart emacs and rm ~/.emacs.d/tramp on my local to get
  ;; this config to take effect
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  
  ;; Use SSH ControlMasters to try to keep any connections alive as long as
  ;; possible. This gets rid of a lot of time spent reconnecting and
  ;; re-inputting credentials
  (setq tramp-ssh-controlmaster-options
        "-o ControlMaster=auto -o ControlPersist=yes"))
#+END_SRC
*** Interacting with the operating system
- Note: OS-specific settings should be in their own literate/OS.org file.
- However, some OS-agnostic settings can still live here to reduce code duplication
#+BEGIN_SRC emacs-lisp
(bind-key "H-d" #'delete-file)
(bind-key "H-r" #'rename-file)

;; I don't want a prompt, but I /do/ want some verification when a revert happens
(defun krista/revert-buffer-no-prompt-yes-message ()
  "Revert buffer without a yes/no prompt, and then show a message"
  (revert-buffer-no-prompt)
  (message "Buffer reverted"))
(bind-key "H-R" #'krista/revert-buffer-no-prompt-yes-message)
#+END_SRC
*** Quick find-file
#+BEGIN_SRC emacs-lisp
(defun krista/speedy-open-todo ()
  "Quickly open my todo file"
  (interactive)
  (find-file krista/todo-file))
(defun krista/speedy-open-at-a-glance ()
  "Quickly open my at-a-glance file"
  (interactive)
  (find-file krista/at-a-glance-file))
(bind-key "H-a" #'krista/speedy-open-at-a-glance)
(bind-key "H-t" #'krista/speedy-open-todo)
#+END_SRC
*** Copy file path to clipboard
#+BEGIN_SRC emacs-lisp
;; Source: https://stackoverflow.com/a/2417617
(defun copy-file-name-to-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
(bind-key "H-f" #'copy-file-name-to-clipboard)
#+END_SRC
** Timestamps
#+BEGIN_SRC emacs-lisp
;; Show the time
(display-time-mode 1)
;; Do show the date
(setq display-time-day-and-date t)
;; %l == hour, in 12-hour time
;; %M == minute
;; %p == AM/PM; %#p == am/pm
;; %a == abbreviated name of the day of week (e.g. Sat for Saturday)
;; %b == abbreviated name of the month (e.g. Aug for August)
;; %e == day of month (1-31)
;; %Z == name of time zone
(setq display-time-format "%l:%M%#p %a, %b.%e (%Z)")

;; Customize dates
;; ----------------

(with-eval-after-load 'org-mode
  ;; Use am/pm instead of 24-hour time!
  ;; Source: http://dept.stat.lsa.umich.edu/~jerrick/org_agenda_calendar.html
  (setq org-agenda-timegrid-use-ampm 1)
  (setq-default org-display-custom-times t)

  (setq org-time-stamp-custom-formats
        ;; [abbreviated day of week] [abbreviated month] [day of month] [4-digit year]
        '("<%a %b %e %Y>"
          ;; ^^ + [hour (1-12)]:[minute] [am/pm] [timezone offset]
          . "<%a %b %e %Y %l:%M%p>"))

  ;; TODO: see this for custom time formats
  ;; https://orgmode.org/manual/Custom-time-format.html#Custom-time-format

  ;; Org timestamp DWIM
  ;; Source: https://emacs.stackexchange.com/a/3320
  (defvar time-range-with-pm-suffix '("1:00" . "6:59"))
  (defun org-analyze-date-dwim (original-fun ans org-def org-defdecode)
    (let* ((time (funcall original-fun ans org-def org-defdecode))
           (minute (nth 1 time))
           (hour (nth 2 time))
           (minutes (+ minute (* 60 hour)))
           s)
      (when (and (< hour 12)
                 (not (string-match "am" ans))
                 (>= minutes (org-hh:mm-string-to-minutes (car time-range-with-pm-suffix)))
                 (<= minutes (org-hh:mm-string-to-minutes (cdr time-range-with-pm-suffix))))
        (setf (nth 2 time) (+ hour 12))
        (when (boundp 'org-end-time-was-given)
          (setq s org-end-time-was-given)
          (if (and s (string-match "^\\([0-9]+\\)\\(:[0-9]+\\)$" s))
              (setq org-end-time-was-given
                    (concat (number-to-string (+ 12 (string-to-number (match-string 1 s))))
                            (match-string 2 s))))))
      time))
  (advice-add 'org-read-date-analyze :around #'org-analyze-date-dwim)


  ;; Don't penalize me for accidentally typing too much!
  ;; Source: https://emacs.stackexchange.com/a/2591
  (defvar parse-time-weekdays-longer
    '(("sund" . 0) ("tues" . 2) ("thurs" . 4)))
  (defvar parse-time-months-longer
    '(("janu" . 1) ("dece" . 12)))
  (eval-after-load 'parse-time
    '(progn
       (setq parse-time-weekdays (nconc parse-time-weekdays
                                        parse-time-weekdays-longer))
       (setq parse-time-months (nconc parse-time-months
                                      parse-time-months-longer))))
  )
#+END_SRC
* Appearance
** Aesthetic tweaks
*** Set cursor appearance
Note: changing the cursor-type does not take effect until emacs is restarted,
because it only sets the /default/ cursor type. I have not yet figured
out how to set it immediately, but this should suffice as startup config.
#+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'bar)
(setq-default cursor-in-non-selected-windows 'hollow)
#+END_SRC
*** Change the fringe wrap indicators
- Fringe wrap indicators are used to show that a line is wider than
  the current window. 
- The default fringe wrap indicators are a curly arrow
- I prefer an elipsis:
  #+BEGIN_SRC emacs-lisp
   ;; Only relevant if indicate-empty-line is set to t
   (define-fringe-bitmap 'empty-line [0 0 #x3c #x3c #x3c #x3c 0 0]) 

   (define-fringe-bitmap 'right-curly-arrow
     [#b00000000
      #b00000000
      #b00000000
      #b00000000
      #b00000000
      #b10010010
      #b10010010
      #b00000000])

   (define-fringe-bitmap 'left-curly-arrow
     [#b00000000
      #b00000000
      #b00000000
      #b00000000
      #b00000000
      #b10010010
      #b10010010
      #b00000000])

  (setq visual-line-fringe-indicators (quote (left-curly-arrow right-curly-arrow)))
  #+END_SRC
*** Hide the fringe
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'fringe nil :background "#001519")
;;(set-face-attribute 'vertical-border nil :foreground "#cf7a00")
#+END_SRC
*** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :font "Fira Code-13" :weight 'light)
(set-face-attribute 'bold nil :weight 'demibold)
;; https://github.com/tonsky/FiraCode/wiki/Setting-up-Emacs
;; for the railwaycat emacs port
(mac-auto-operator-composition-mode)


(set-face-attribute 'bold-italic nil
                    :slant 'oblique
                    :weight 'bold)

(set-face-attribute 'font-lock-doc-face nil
                    :foreground "#58615a"
                    :family "Fira Code")

(set-face-attribute 'region nil :background "#032929")

#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
;; Load my theme
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "literate/tron-doom/"))
(load-theme 'tron-doom t) ; t for "don't ask me to load this theme"

;; Global settings (defaults)
(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
      doom-themes-enable-italic t) ; if nil, italics is universally disabled

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Set different faces for TODO items with different priority levels
;; Source: https://emacs.stackexchange.com/a/17405
(setq org-priority-faces '((?A . (:foreground "#cf7a00" :weight 'extrabold))
                          (?B . (:foreground "#00a890" :weight 'bold))
                          (?C . (:foreground "#075f5f"))))

#+END_SRC
* Major packages
** LaTeX
#+BEGIN_SRC emacs-lisp
(use-package tex
  :ensure auctex
  :defer 5
  :config
  ;; TODO: fucks up prettify for some reason?
  ;; (company-auctex-init)
  ;; save buffer style info
  (setq TeX-auto-save t)
  ;; automatically parse style info
  (setq TeX-parse-self t)
  ;; no tabs
  (setq TeX-auto-untabify t)
  ;; TODO: unsure what this does
  ;; (setq-default TeX-master 'dwim)
  (setq TeX-PDF-mode t)
  (defun spruce/TeX-open-output-buffer ()
    (interactive)
    (let ((output-file (with-current-buffer TeX-command-buffer
                         (expand-file-name
                          (TeX-active-master (TeX-output-extension))))))
      (find-file output-file)))
  (add-to-list 'TeX-view-program-list
               (list "Emacs" #'spruce/TeX-open-output-buffer))

  (setq TeX-view-program-selection '((output-pdf "Emacs")))
  ;; better name for local variable
  (defun latex-compile ()
    (interactive)
    (save-buffer)
    (TeX-command "LaTeX" 'TeX-master-file))

  (setq TeX-auto-local ".auctex-auto")
  ;; auto revert pdf buffer
  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)
  ;; show errors if there were any
  (setq TeX-error-overview-open-after-TeX-run t)
  ;; don't confirm before cleaning files
  (setq TeX-clean-confirm nil)
  (setq TeX-save-query nil)
  (defun TeX-insert-pair (arg open-str close-str)
    "Like TeX-insert-brackes but for any pair"
    (interactive "P")
    (if (TeX-active-mark)
        (progn
          (if (< (point) (mark)) (exchange-point-and-mark))
          (insert close-str)
          (save-excursion (goto-char (mark)) (insert open-str)))
      (insert open-str)
      (save-excursion
        (if arg (forward-sexp (prefix-numeric-value arg)))
        (insert close-str))))
  (setq TeX-electric-sub-and-superscript t)
  (put 'TeX-command-extra-options 'safe-local-variable
       (lambda (x) (string-equal x "-shell-escape")))
  (setq-default TeX-command-extra-options "-shell-escape")
  (use-package latex
    :ensure nil
    :config
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (setq LaTeX-math-menu-unicode t)
    (add-hook 'LaTeX-mode-hook (lambda () (latex-electric-env-pair-mode t)))
    (add-hook 'LaTeX-mode-hook
              (lambda () (set-fill-column 90)))
    (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
    ;; (add-hook 'LaTeX-mode-hook (lambda () (prettify-symbols-mode)))
    (defun spruce/LaTeX-insert-inline-math (arg)
      (interactive "P")
      (TeX-insert-pair arg "\\( " " \\)"))
    (defun spruce/LaTeX-insert-display-math (arg)
      (interactive "P")
      (TeX-insert-pair arg "\\[ " " \\]"))

    (defun spruce/LaTeX-insert-problem (problem-number &optional is-last)
      (beginning-of-line)
      (let ((problem (concat "\\problem{" problem-number "}"))
            (unfinished "\\unfinished{}"))
        (insert problem "\n\n" unfinished "\n"
                (if is-last "" "\n"))))

    (defun spruce/LaTeX-make-problem-list ()
      (interactive)
      (let ((data (split-string (thing-at-point 'line t))))
        (when data
          (delete-region (line-beginning-position)
                         (line-end-position))
          (mapc #'spruce/LaTeX-insert-problem (butlast data))
          (spruce/LaTeX-insert-problem (car (last data)) t))))

    (defun spruce/LaTeX-mode-keybindings ()
      (bind-key "H-C-j" #'spruce/LaTeX-insert-inline-math
                (current-local-map))
      (bind-key "H-C-k" #'spruce/LaTeX-insert-display-math
                (current-local-map))
      (bind-key "C-c x p" #'spruce/LaTeX-make-problem-list
                (current-local-map))
      (local-unset-key "\""))

    (add-hook 'LaTeX-mode-hook #'spruce/LaTeX-mode-keybindings)
    (add-hook 'org-mode-hook #'spruce/LaTeX-mode-keybindings)
    (with-eval-after-load 'smartparens
      (add-hook 'TeX-mode-hook #'smartparens-mode))
    (use-package font-latex
      :ensure nil
      :config
      (set-face-attribute 'font-latex-sedate-face nil
                          :inherit 'font-lock-constant-face
                          :foreground 'unspecified))
    :bind (:map LaTeX-mode-map
           ("C-c c" . latex-compile))))

(use-package reftex
  :diminish reftex-mode
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq reftex-toc-follow-mode t))

;; Don't prompt me for section labels!!!
;; Source: https://tex.stackexchange.com/a/194017
;; (eval-after-load "latex"
;;   '(progn
;;      (defun LaTeX-label (env))))
;; (setq latex-templates-directory (with-user-d "templates" "latex-templates"))
;; (defun latex-template ()
;;   (interactive)
;;   (let* ((files (file-expand-wildcards (concat latex-templates-directory "*.tex")))
;;          (selection (completing-read "LaTeX Template: "
;;                                      (mapcar #'file-name-base files))))
;;     (insert-file-contents (concat latex-templates-directory selection ".tex"))))
#+END_SRC
** Org-mode
*** Config
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading org-mode settings...")
(use-package org
  :diminish org-indent-mode
  :config
  (message "[krista] Loading org-aesthetics...")
  <<org-aesthetics>>
  (message "[krista] Loading org-capture...")
  <<org-capture>>
  (message "[krista] Loading org-agenda...")
  <<org-agenda>>
  (message "[krista] Loading org-inline-images...")
  <<org-inline-images>>
  (message "[krista] Loading org-tree-behavior...")
  <<org-tree-behavior>>
  (message "[krista] Loading org-code-snippets...")
  <<org-code-snippets>>
  (message "[krista] Loading org-links...")
  <<org-links>>
  (message "[krista] Loading org-tables...")
  <<org-tables>>
  :bind (
         ("C-c c" . org-capture)
         ("C-c a" . org-agenda)

         ;; Links!
         ;; - C-c C-l will insert link,
         ;; - C-c C-o will open the link at the point
         ("C-c l" . org-store-link)

         ;; Keybindings that insert inline / display math
         ;; into org docs, s.t. everything will export to
         ;; LaTeX nicely:
         ;; NOTE: These shortcuts match up with my shortcuts
         ;;       for inserting inline / display math into
         ;;       regular LaTeX docs. This is to provide as
         ;;       seamless an experience as I can muster.
         ))
#+END_SRC
*** Tips from http://orgmode.org/worg/org-tutorials/orgtutorial_dto.html
**** todo / schedule / deadline
- C-c C-t :: org-todo
- C-c C-s :: org-schedule
- C-c C-d :: org-deadline
- M-shift-RET :: org-insert-todo-heading
  - Adds newline
  - Adds bullet at same indentation level
  - Bullet automatically has a `TODO' header
**** agenda view:
- hit `t' to mark an item DONE
- hit `l' to enter log display
**** shift-TAB :: OVERVIEW vs. normal mode
*** Aesthetics
#+BEGIN_SRC emacs-lisp :noweb-ref org-aesthetics :tangle no
;; Display bullets instead of asterisks
(use-package org-bullets
  :diminish
  :config
  (setq org-bullets-bullet-list (quote ("⊕" "⦷" "⊜" "⊝"))))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))

;; Make LaTeX bigger when I'm presenting
;; (setq org-format-latex-options (plist-put org-format-latex-options :scale 4.0))

;; Setting this to `t' will automatically render LaTeX special
;; characters, if possible/sensible
;; E.g. "\" + "alpha" becomes a lowercase alpha
;; I have it turned off, but it's here
;; (setq org-pretty-entities t)

;; Setting this to `t' will use {} to render sub/super-scripts
;; e.g. asdf_{123} is rendered as "asdf sub 123"
;; I have it turned off, but it's here
(setq org-use-sub-superscripts "{}")

;; Hide org markup elements
;; See http://stackoverflow.com/questions/10969617/hiding-markup-elements-in-org-mode
;; Note: This change may not take effect until you restart emacs:
;; See http://orgmode.org/manual/Emphasis-and-monospace.html
(setq org-hide-emphasis-markers t)

;; Make top-level headings larger, and lower-level headings progressively smaller
;; (set-face-attribute 'org-level-1 nil :inherit 'outline-1 :height 1.2)
;; (set-face-attribute 'org-level-2 nil :inherit 'outline-2 :height 1.0)

;; Use my theme as the color scheme for source blocks
(setq org-src-fontify-natively t)

;; Don't add a weird indent to source blocks
(setq org-src-preserve-indentation nil
      org-edit-src-content-indentation 0)

;; Org mode clean view
;; <http://orgmode.org/manual/Clean-view.html>
(setq org-startup-indented t)

;; When you visit an agenda for the first time, still honor my startup preferences
(setq org-agenda-inhibit-startup nil)

;; in org mode C-a/e moves to beginning of text in line, after header asterisks
;; however you can press it again to go all the way
(setq org-special-ctrl-a/e t)

;; Set default size for org tables
(setq org-table-default-size "2x3")

(set-face-attribute 'org-code nil
                    :inherit 'shadow
                    :foreground "dark sea green"
                    :family "Courier")

(set-face-attribute 'org-verbatim nil
                    :inherit 'shadow
                    :stipple nil
                    :foreground "AntiqueWhite4"
                    :family "Andale Mono")

;; Add custom Org keywords/"tags"/previews/metadata for text to follow
;; For example, I like "thm" and "def" when taking math notes
(font-lock-add-keywords 'org-mode
                        '(("NOTE" . font-lock-comment-face)
                          ("THM" . font-lock-comment-face)
                          ("DATA" . font-lock-comment-face)
                          ("EXAMPLE" . font-lock-comment-face)
                          ("DEF" . font-lock-comment-face)
                          ("LEMMA" . font-lock-comment-face)
                          ("IDEA" . font-lock-comment-face)
                          ("RMK" . font-lock-comment-face)))

;; Multiple workflows: in-built TODO system, packing/moving
(setq krista/packing-mode nil)
(if krista/packing-mode
    (setq org-todo-keywords
          '((sequence "TODO(t)" "|" "DONE(d)" "CANCELLED(c)")
            (sequence "GATHER(g)" "PACK(p)" "|" "LOAD(l)" "UNPACK(u)")))
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "DONE(d)")))))

;; Org todo keyword faces
(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "#75dbb7" :weight bold)
              ("NEXT" :foreground "#888a85" :weight bold)
              ("WAITING" :foreground "#888a85" :weight bold)
              ("DONE" :foreground "#075f5f" :weight bold)
              ("CANCELLED" :foreground "#075f5f" :weight bold))))
#+END_SRC
*** Exporting to LaTeX
#+BEGIN_SRC emacs-lisp
;; Put newlines around my images, please!
;; http://emacs.stackexchange.com/questions/5363/centered-figures-in-org-mode-latex-export?rq=1
(advice-add 'org-latex--inline-image :around
            (lambda (orig link info)
              (concat
               "\\begin{center}"
               (funcall orig link info)
               "\\end{center}")))
#+END_SRC
*** Org-capture
#+BEGIN_SRC emacs-lisp :noweb yes :noweb-ref org-capture :tangle yes
;; Org capture
(setq org-default-notes-file (concat org-directory "/notes.org"))
;; To see what goes into an org-capture template, see
;; http://orgmode.org/manual/Template-expansion.html#Template-expansion
(setq org-capture-templates
      '(("a" "annoy" entry
         (file+olp krista/todo-file "feng shui" "annoy" "refile")
         "* %?\n %i\n")
        ;; ("h" "hw-style-guide" entry
        ;;  (file+olp "~/core/school/powerpoint_shaming/tacky_hw_things.org" "tacky!")
        ;;  "* %?\n %i\n")
        ("m" "movies" entry
         (file+olp "~/core/lists/movies.org" "refile")
         "* %?\n %i\n")
        ("q" "quotes" entry
         (file+olp "~/core/lists/quotes.org" "quotes")
         "* %?\n %i\n")
        ("s" "shopping" entry
         (file+olp krista/todo-file "shopping")
         "* %?\n %i\n")
        ("t" "todo" entry
         (file+olp krista/todo-file "todo-queue")
         "* TODO %?\n %i\n")
        ;; ("v" "advice" entry
        ;;  (file+olp "~/core/lists/advice.org" "refile")
        ;;  "* %?\n %i\n")
        ;; ("w" "workflow advice" entry
        ;;  (file+olp "~/core/lists/advice.org" "workflow advice")
        ;;  "* %?\n %i\n")
        ))
<<org-refile-targets>>
#+END_SRC
**** Org refile targets
#+BEGIN_SRC emacs-lisp :noweb-ref org-refile-targets :tangle no
(setq org-refile-use-outline-path t) ; Show full paths for refiling 
(setq org-refile-allow-creating-parent-nodes (quote confirm)) ; allow refile to create parent tasks with confirmation

;; Source:
;; https://emacs.stackexchange.com/questions/22128/how-to-org-refile-to-a-target-within-the-current-file?rq=1
;; Hmm. This only lets you pick from the buffer that you're currently visiting,
;; but I want the file specified by the org capture template
;; (defun my-org-files-list ()
;;  (delq nil
;;    (mapcar (lambda (buffer)
;;      (buffer-file-name buffer))
;;      (org-buffer-list 'files t))))

(setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp :noweb-ref org-agenda :tangle no
;; Places to sniff when compiling a list of TODO items
(setq org-agenda-files (list krista/todo-file
                             krista/at-a-glance-file))

;; If non-nil: mousing over TODO items in org agenda => show TODO item in other buffer
(setq org-agenda-start-with-follow-mode nil)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Start the week on Sunday
;; https://emacs.stackexchange.com/a/28913
(setq org-agenda-start-on-weekday 0)

;; Show the whole week
(setq org-agenda-span 7)

;; Don't display items that are done
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
;; Don't display deadlines for scheduled items
(setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
;; Don't display upcoming deadlines under each day
(setq org-agenda-only-exact-dates t)
(setq org-deadline-warning-days 0)

;;Non-nil means skip scheduled delay when entry also has a deadline
(setq org-agenda-skip-scheduled-delay-if-deadline t)

(setq org-agenda-sorting-strategy
      '((agenda habit-down time-up deadline-up scheduled-up category-up priority-down)
        (todo priority-down category-up)
        (tags priority-down category-keep)
        (search category-keep)))
;; Aesthetics 
;; ------------

;; https://emacs.stackexchange.com/a/17832
(setq org-agenda-prefix-format '(
                                 (agenda  . "    • %-32b ") ;; bullet + 32-char "breadcrumb"
                                 (todo  . " %i ")))
;; (setq org-agenda-tags-column -100) ; take advantage of the screen width

;; Don't use a time grid in the agenda view
(setq org-agenda-use-time-grid nil)

;; Make 'q' kill the org agenda buffer
(setq org-agenda-sticky nil)

(setq org-agenda-inhibit-startup t)
(setq org-agenda-use-tag-inheritance t)
(setq org-agenda-show-log t)
#+END_SRC
*** inline images
#+BEGIN_SRC emacs-lisp :noweb-ref org-inline-images :tangle no
;; Let me resize them plz!
(setq org-image-actual-width '(500))
;; => if there is a #+ATTR.*: width="200", resize to 200,
;;     otherwise resize to 500 pixels wide
;; link credit: http://lists.gnu.org/archive/html/emacs-orgmode/2012-08/msg01388.html

;; By default, *do* display inline images
(setq org-startup-with-inline-images t)
#+END_SRC
*** Tweaks to tree behavior
Use shift+meta-<right>, to get lateral shifts (demotion/promotion) that apply to the whole subtree!
#+BEGIN_SRC emacs-lisp :noweb-ref org-tree-behavior :tangle no
;; Source: Spruce Bondera
(defun krista/org-cycle-current-subtree ()
  (interactive)
  (let ((old-tab-style org-cycle-emulate-tab))
    (setq org-cycle-emulate-tab nil)
    (org-cycle)
    (setq org-cycle-emulate-tab old-tab-style)))
(bind-key "C-<tab>" #'krista/org-cycle-current-subtree)
#+END_SRC
*** Code snippets in org
#+BEGIN_SRC emacs-lisp :noweb-ref org-code-snippets :noweb tangle :tangle yes
<<org-quick-source-blocks>>
<<org-babel-config>>
#+END_SRC
**** Quickly add source blocks
Example: Start a new elisp block in org mode by typing <el and then pressing TAB
***** Config
#+BEGIN_SRC emacs-lisp :noweb-ref org-quick-source-blocks :tangle no
(add-to-list 'org-structure-template-alist
             '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("c" "#+BEGIN_SRC C\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("txt" "#+BEGIN_SRC txt\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("cpp" "#+BEGIN_SRC C++\n?\n#+END_SRC" ""))
(add-to-list 'org-structure-template-alist
             '("p" "#+BEGIN_SRC python\n?\n#+END_SRC" ""))
;; "Example" block for plaintext
(add-to-list 'org-structure-template-alist
             '("ex" "#+BEGIN_EXAMPLE \n?\n#+END_EXAMPLE" ""))
#+END_SRC
**** Babel / Languages
#+BEGIN_SRC emacs-lisp :noweb-ref org-babel-config :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '((latex . t)
   (python . t)
   (emacs-lisp . t)
   (C . t)
   (lisp . t)))
#+END_SRC
*** Links
Org link workflow:
1. save link to current location with C-c l
2. move to spot where I'd like to insert the link
3. C-c C-l to insert link
4. (TODO! Fix this annoyance:) delete the default string, because I
   basically never use the file path as the link description
5. type in my own description
6. carry on with my life
#+BEGIN_SRC emacs-lisp :noweb-ref org-links :tangle no
(defun org-link-describe (link desc)
  (if (file-exists-p link)
      desc
    (read-string "Description: " nil)))
(setf org-make-link-description-function #'org-link-describe)
#+END_SRC

*** Org tables
Source: https://emacs.stackexchange.com/a/30871
#+BEGIN_SRC emacs-lisp :noweb-ref org-tables :tangle no
(defun org-table-wrap-to-width (width) 
  "Wrap current column to WIDTH."
  (interactive (list (read-number "Enter column width: ")))
  (org-table-check-inside-data-field)
  (org-table-align)

  (let (cline (ccol (org-table-current-column)) new-row-count (more t))
    (org-table-goto-line 1)
    (org-table-goto-column ccol)

    (while more
      (setq cline (org-table-current-line))

      ;; Cut current field
      (org-table-copy-region (point) (point) 'cut)

      ;; Justify for width
      (setq org-table-clip 
            (mapcar 'list (org-wrap (caar org-table-clip) width nil)))

      ;; Add new lines and fill
      (setq new-row-count (1- (length org-table-clip)))
      (if (> new-row-count 0)
          (org-table-insert-n-row-below new-row-count)) 
      (org-table-goto-line cline)
      (org-table-goto-column ccol)
      (org-table-paste-rectangle)
      (org-table-goto-line (+ cline new-row-count))

      ;; Move to next line
      (setq more (org-table-goto-line (+ cline new-row-count 1)))
      (org-table-goto-column ccol))

    (org-table-goto-line 1)
    (org-table-goto-column ccol)))

;; ;; Default cell width
;; (setq org-cell-fill-column 50)

;; ;; Define a dwim, so the regular binding for M-q still works when I'm not in an
;; ;; org-table data field
;; (defun org-table-fill-dwim
;;     (if (org-table-check-inside-data-field)
;;         (org-table-wrap-to-width)
;;       (fill-paragraph)))

;; (add-hook 'org-mode-hook
;;           (lambda () (bind-key "M-q" #'org-table-fill-dwim)))

(defun org-table-insert-n-row-below (n)
  "Insert N new lines below the current."
  (let* ((line (buffer-substring (point-at-bol) (point-at-eol)))
         (new (org-table-clean-line line)))
    ;; Fix the first field if necessary
    (if (string-match "^[ \t]*| *[#$] *|" line)
        (setq new (replace-match (match-string 0 line) t t new)))
    (beginning-of-line 2)
    (setq new
      (apply 'concat (make-list n (concat new "\n"))))
    (let (org-table-may-need-update) (insert-before-markers new))  ;;; remove? 
    (beginning-of-line 0)
    (re-search-forward "| ?" (point-at-eol) t)
    (and (or org-table-may-need-update org-table-overlay-coordinates) ;;; remove? 
         (org-table-align))
    (org-table-fix-formulas "@" nil (1- (org-table-current-dline)) n)))

;; (global-set-key (kbd "C-c M-q") org-table-))
#+END_SRC
** Calfw
CAL-endar F-rameW-ork
#+BEGIN_SRC emacs-lisp
(use-package calfw
  :config 

  (use-package calfw-org
    :config
    (setq cfw:org-overwrite-default-keybinding t)
    (bind-key "H-c" #'cfw:open-org-calendar)
    )

  ;; Unicode characters
  ;; (setq cfw:fchar-junction ?╋
  ;;       cfw:fchar-vertical-line ?┃
  ;;       cfw:fchar-horizontal-line ?━
  ;;       cfw:fchar-left-junction ?┣
  ;;       cfw:fchar-right-junction ?┫
  ;;       cfw:fchar-top-junction ?┯
  ;;       cfw:fchar-top-left-corner ?┏
  ;;       cfw:fchar-top-right-corner ?┓)
  (setq cfw:fchar-junction ?╬
        cfw:fchar-vertical-line ?║
        cfw:fchar-horizontal-line ?═
        cfw:fchar-left-junction ?╠
        cfw:fchar-right-junction ?╣
        cfw:fchar-top-junction ?╦
        cfw:fchar-top-left-corner ?╔
        cfw:fchar-top-right-corner ?╗)

  (setq cfw:render-line-breaker 'cfw:render-line-breaker-none)
  )

#+END_SRC
** Ivy/Swiper/Counsel
- Comparison with helm
  - Ivy
    - Like Helm
    - Standalone package
  - Swiper
    - Like Helm swoop
    - Relies on Ivy
  - Counsel
  - Like Helm descbinds + Helm persistent action
  - Relies on Swiper + Ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :bind
  ;; (:map ivy-mode-map
  ;;  ("C-'" . ivy-avy))
  :config
  (ivy-mode 1)

  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)

  ;; number of result lines to display
  ;; (setq ivy-height 15)

  ;; does not count candidates
  ;; (setq ivy-count-format "")

  ;; no regexp by default / remove initial ^ input.
  (setq ivy-initial-inputs-alist nil)

  ;; configure regexp engine.
  (setq ivy-re-builders-alist '((t . ivy--regex-plus)
                                (t . ivy--regex-fuzzy)
                                (t   . ivy--regex-ignore-order)))

  (setq enable-recursive-minibuffers t)
  (setq ivy-display-style 'fancy)
  (setq ivy-count-format "(%d/%d) ")

  (global-set-key (kbd "C-s") 'swiper)
  ;; Resume ivy session
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "M-I") 'counsel-imenu)
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-h b") 'counsel-descbinds)
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  (global-set-key (kbd "C-h F") 'counsel-describe-face)
  (global-set-key (kbd "M-y") 'counsel-yank-pop)
  (global-set-key (kbd "<f1> l") 'counsel-find-library)
  (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
  (global-set-key (kbd "C-c g") 'counsel-git)
  (global-set-key (kbd "C-c j") 'counsel-git-grep)
  (global-set-key (kbd "C-c k") 'counsel-ag)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-S") 'counsel-grep-or-swiper)
  (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
  (global-set-key [remap switch-to-buffer] 'ivy-switch-buffer)
  )

;; I used Helm before using Ivy, so I still have the muscle memory C-l to move
;; up a directory. This snippet allows me to bind C-l to interact helm-style
;; Source: https://github.com/abo-abo/swiper/issues/1257
(defun ivy-backward-directory ()
  "Forward to `kill-start-of-line'.
On error (read-only), call `ivy-on-del-error-function'."
  (interactive)
  (if (and ivy--directory (= (minibuffer-prompt-end) (point)))
      (progn
        (let ((old-dir (file-name-nondirectory
                        (directory-file-name ivy--directory)))
              idx)
          (ivy--cd (file-name-directory
                    (directory-file-name
                     (expand-file-name
                      ivy--directory))))
          (ivy--exhibit)
          (when (setq idx (cl-position
                           (file-name-as-directory old-dir)
                           ivy--old-cands
                           :test 'equal))
            (ivy-set-index idx))))
    (condition-case nil
        (kill-start-of-line) ; a little different here
      (error
       (when ivy-on-del-error-function
         (funcall ivy-on-del-error-function))))))


;; Ivy interface for bookmarks
;; Source: http://blog.binchen.org/posts/hello-ivy-mode-bye-helm.html
;; (defun ivy-bookmark-goto ()
;;   "Open ANY bookmark"
;;   (interactive)
;;   (let (bookmarks filename)
;;     ;; load bookmarks
;;     (unless (featurep 'bookmark)
;;       (require 'bookmark))
;;     (bookmark-maybe-load-default-file)
;;     (setq bookmarks (and (boundp 'bookmark-alist) bookmark-alist))

;;     ;; do the real thing
;;     (ivy-read "bookmarks:"
;;               (delq nil (mapcar (lambda (bookmark)
;;                                   (let (key)
;;                                     ;; build key which will be displayed
;;                                     (cond
;;                                      ((and (assoc 'filename bookmark) (cdr (assoc 'filename bookmark)))
;;                                       (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'filename bookmark)))))
;;                                      ((and (assoc 'location bookmark) (cdr (assoc 'location bookmark)))
;;                                       ;; bmkp-jump-w3m is from bookmark+
;;                                       (unless (featurep 'bookmark+)
;;                                         (require 'bookmark+))
;;                                       (setq key (format "%s (%s)" (car bookmark) (cdr (assoc 'location bookmark)))))
;;                                      (t
;;                                       (setq key (car bookmark))))
;;                                     ;; re-shape the data so full bookmark be passed to ivy-read:action
;;                                     (cons key bookmark)))
;;                                 bookmarks))
;;               :action (lambda (bookmark)
;;                         (bookmark-jump bookmark)))
;;     ))
;; (bind-key "C-x r l" #'ivy-bookmark-goto)

;; Make ivy play nice with "C-c w" (org-refile)
;; Source: https://github.com/abo-abo/swiper/issues/986#issuecomment-300482804
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)

(eval-after-load 'ivy
  '(progn
     (define-key ivy-minibuffer-map (kbd "C-l") 'ivy-backward-directory)))


(use-package helm
  :config
  (global-set-key (kbd "C-x C-r") 'helm-recentf))
#+END_SRC
** Company
*** company (COM-plete ANY-thing)
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading company...")
(use-package company 
  :diminish
  :config
  (global-company-mode)
  ;; Trigger suggestions faster (default value: 0.5 (seconds))
  (setq company-idle-delay 0.1)
  :bind (("C-;" . company-complete-selection)))

;; Scroll through completion options with C-n and C-p (instead of M-n
;; and M-p)
;; Source: https://emacs.stackexchange.com/a/2990
(with-eval-after-load 'company
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous))

;; Backends
(use-package company-irony)
(use-package company-c-headers)
(with-eval-after-load 'company
  (add-to-list 'company-backends 'company-irony)
  (add-to-list 'company-backends 'company-c-headers))

;; Theme
(custom-set-faces
 ;; Auto-completion preview (for the case where there's a unique suggestion)
 ;; ------------------------------------------------------------------------
 '(company-preview
   ((t (:foreground "darkgray" :underline t :family "Fira Code"))))
 '(company-preview-common
   ((t (:inherit company-preview :foreground "#cf7a00"))))
 
 ;; Scrollbar
 ;; ----------
 '(company-scrollbar-fg
   ((t (:background "#804532"))))
 '(company-scrollbar-bg
   ((t (:background "#19343D"))))

 ;; Tooltips
 ;; -----------
 ;; In case you're wondering, this is what a "tooltip" looks like
 ;; http://www.goldsborough.me/images/emacs-java/correcting.png
 '(company-tooltip
   ((t (:background "#19343D" :foreground "#306158"))))
 '(company-tooltip-selection
   ((t (:background "#cf7a00" :foreground "#a0ffff" :weight bold))))
 '(company-tooltip-common
   ((((type x)) (:inherit company-tooltip :weight bold))
    (t (:inherit company-tooltip))))
 '(company-tooltip-common-selection
   ((((type x)) (:inherit company-tooltip-selection :weight bold))
    (t (:inherit company-tooltip-selection))))

 ;; TODO: move this
 '(org-tag ((t (:foreground "#075f5f" :slant oblique))))
 '(org-date ((t (:foreground "Cyan" :underline "#075f5f")))))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading projectile...")
(use-package projectile
  :diminish
  :config
  (setq projectile-completion-system 'ivy)
  (projectile-global-mode)
  <<counsel-projectile>>
  )
#+END_SRC
*** counsel projectile
#+BEGIN_SRC emacs-lisp :noweb-ref counsel-projectile :tangle yes
(use-package counsel-projectile
  :diminish
  :config
  (counsel-projectile-mode))
#+END_SRC
** Magit
*** [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git][Magit tutorial]]
*** Config
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading magit...")
(use-package magit
  :config
  <<magit-color-scheme>>
  ;; Default arguments to magit log
  (setq magit-log-arguments '("-n150" "--graph" "--decorate" "--color"))
  :bind
  (("C-c g" . magit-status)))
#+END_SRC
*** Color scheme
Note: "vc" stands for *V*-ersion *C*-ontrol
#+BEGIN_SRC emacs-lisp :noweb-ref magit-color-scheme :tangle no
(setq vc-annotate-background nil)
(setq vc-annotate-color-map
      (quote
       ((20 . "#f2777a")
        (40 . "#f99157")
        (60 . "#ffcc66")
        (80 . "#99cc99")
        (100 . "#66cccc")
        (120 . "#6699cc")
        (140 . "#cc99cc")
        (160 . "#f2777a")
        (180 . "#f99157")
        (200 . "#ffcc66")
        (220 . "#99cc99")
        (240 . "#66cccc")
        (260 . "#6699cc")
        (280 . "#cc99cc")
        (300 . "#f2777a")
        (320 . "#f99157")
        (340 . "#ffcc66")
        (360 . "#99cc99"))))
(setq vc-annotate-very-old-color nil)
#+END_SRC
* Minor packages
** bookmark+ (bmkp)
#+BEGIN_SRC emacs-lisp
(use-package bookmark+)
#+END_SRC
** paradox
Paradox is better package management
#+BEGIN_SRC emacs-lisp
;; Speedy-open melpa
(use-package paradox
  :bind (("H-p" . paradox-list-packages)))
;; Set to t => Don't ask me to integrate with github every time I want to look
;; at melpa!
(with-eval-after-load 'paradox (setq paradox-github-token t))
#+END_SRC
** Cheatsheet
*** What is cheatsheet?
Cheatsheet gives quick access to read-only buffers.
Use case: peeking at cheat sheets!
Github page: https://github.com/darksmile/cheatsheet/
*** How to use cheatsheet
**** Pull up your cheatsheet :: cheatsheet-show
- Show buffer with your cheatsheet!
- Use H-c to show the cheatsheet
- Use C-q to exit the cheatsheet
**** Add a new cheat to your cheatsheet :: cheatsheet-add
Here's an example cheat. Follow this format in your config
#+BEGIN_SRC example
(cheatsheet-add :group 'Common
                :key "C-x C-c"
                :description "leave Emacs.")
#+END_SRC
*** Krista's cheatsheet entries
#+BEGIN_SRC emacs-lisp :noweb tangle
(message "[krista] Loading cheatsheet...")
(use-package cheatsheet
  :config
  <<common-cheats>>
  <<LaTeX-cheats>>
  <<org-cheats>>
  <<magit-cheats>>
  <<projectile-cheats>>
  <<builtin-cheats>>
  :bind (("H-C" . cheatsheet-show)))
#+END_SRC
**** Common cheats for use throughout Emacs
#+BEGIN_SRC emacs-lisp :noweb-ref common-cheats :tangle yes
(cheatsheet-add :group 'Getting_around
                :key "C-d"
                :description "Kill --> one character")
(cheatsheet-add :group 'Getting_around
                :key "M-d"
                :description "Kill --> to end of word")
(cheatsheet-add :group 'Getting_around
                :key "C-DEL -or- M-DEL"
                :description "Kill <-- to beginning of word")
(cheatsheet-add :group 'Getting_around
                :key "M-@"
                :description "Mark --> to end of word")
(cheatsheet-add :group 'Getting_around
                :key "C-t"
                :description "Swap the character at the mark w/the character before it")
(cheatsheet-add :group 'Getting_around
                :key "M-t"
                :description "Swap the word at the mark w/the word before it")
#+END_SRC
**** LaTeX cheats
Much thanks goes to the AUCTeX Reference Card for version 11.89
#+BEGIN_SRC emacs-lisp :noweb-ref LaTeX-cheats :tangle no
(cheatsheet-add :group 'LaTeX:document_structure ; see "Command Insertion" in the AUCTeX sheet
                :key "C-c C-s"
                :description "Insert section")
(cheatsheet-add :group 'LaTeX:document_structure
                :key "M-RET"
                :description "Insert item")
(cheatsheet-add :group 'LaTeX:document_structure
                :key "C-c ]"
                :description "Close LaTeX environment")

                                        ; Typeface commands: C-c C-f C-[whatever]
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-b"
                :description "Bold")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-i"
                :description "Italics")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-r"
                :description "\\text{} in math mode")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-e"
                :description "\\emph{}")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-t"
                :description "typewriter-style text")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-s"
                :description "(forward-) slanted text")
(cheatsheet-add :group 'LaTeX:typeface
                :key "C-c C-f C-c"
                :description "smallcaps")

                                        ; Source formatting commands: C-c C-q C-[whatever]
(cheatsheet-add :group 'LaTeX:source_formatting
                :key "C-c C-q C-s"
                :description "Align section")
(cheatsheet-add :group 'LaTeX:source_formatting
                :key "C-c C-q C-s"
                :description "Align environment")
(cheatsheet-add :group 'LaTeX:source_formatting
                :key "M-q"
                :description "Align paragraph")
(cheatsheet-add :group 'LaTeX:source_formatting
                :key "C-c *"
                :description "Mark section")
(cheatsheet-add :group 'LaTeX:source_formatting
                :key "C-c ."
                :description "Mark environment")

                                        ; Math abbreviations: `[whatever]
(cheatsheet-add :group 'LaTeX:math_abbrevs:fancy_letters
                :key "` c"
                :description "\\mathcal{}")
(cheatsheet-add :group 'LaTeX:math_abbrevs:fancy_letters
                :key "` ~"
                :description "\\tilde{}")
(cheatsheet-add :group 'LaTeX:math_abbrevs:fancy_letters
                :key "` ^"
                :description "\\hat{}")

(cheatsheet-add :group 'LaTeX:math_abbrevs:arrows
                :key "` C-f"
                :description "\\rightarrow")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arrows
                :key "` C-b"
                :description "\\leftarrow")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arrows
                :key "` C-p"
                :description "\\uparrow")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arrows
                :key "` C-n]"
                :description "\\downarrow")

(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` I"
                :description "\\infty")
(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` A"
                :description "\\forall")
(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` E"
                :description "\\exists")
(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` i"
                :description "\\in")
(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` |"
                :description "\\vee")
(cheatsheet-add :group 'LaTeX:math_abbrevs:logic
                :key "` &"
                :description "\\wedge")

(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` 0"
                :description "\\emptyset")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` \\"
                :description "\\setminus")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` +"
                :description "\\cup")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` -"
                :description "\\cap")

(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` {"
                :description "\\subset")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` }"
                :description "\\supset")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` ["
                :description "\\subseteq")
(cheatsheet-add :group 'LaTeX:math_abbrevs:sets
                :key "` ]"
                :description "\\supseteq")

(cheatsheet-add :group 'LaTeX:math_abbrevs:arithmetic
                :key "` <"
                :description "\\leq")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arithmetic
                :key "` >"
                :description "\\geq")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arithmetic
                :key "` *"
                :description "\\times")
(cheatsheet-add :group 'LaTeX:math_abbrevs:arithmetic
                :key "` ."
                :description "\\cdot")

(cheatsheet-add :group 'LaTeX:math_abbrevs:trig
                :key"` C-e"
                :description "\\exp")

(cheatsheet-add :group 'LaTeX:math_abbrevs:trig
                :key"` C-s"
                :description "\\sin")

(cheatsheet-add :group 'LaTeX:math_abbrevs:trig
                :key"` C-c"
                :description "\\cos")

(cheatsheet-add :group 'LaTeX:math_abbrevs:trig
                :key"` C-t"
                :description "\\tan")

(cheatsheet-add :group 'LaTeX:math_abbrevs:analysis
                :key"` C-^"
                :description "\\sup")

(cheatsheet-add :group 'LaTeX:math_abbrevs:analysis
                :key"` C-_"
                :description "\\inf")

(cheatsheet-add :group 'LaTeX:math_abbrevs:analysis
                :key"` C-l"
                :description "\\lim")

(cheatsheet-add :group 'LaTeX:math_abbrevs:analysis
                :key"` C-d"
                :description "\\det")
#+END_SRC
**** Org-mode cheats
#+BEGIN_SRC emacs-lisp :noweb-ref org-cheats :tangle no
(cheatsheet-add :group 'org
                :key "
,#+attr_org: :width 300 
,#+attr_latex :width 3in :placement [H] 
[[file:./my_image.png]]"
                    :description "Add image inline")
#+END_SRC
**** Magit cheats
***** [[*Magit][Magit use-package entry]]
***** Config
#+BEGIN_SRC emacs-lisp :noweb-ref magit-cheats :tangle no
(cheatsheet-add :group 'magit
                :key "C-c g"
                :description "Enter magit menu")
(cheatsheet-add :group 'magit
                :key "(from status menu) h"
                :description "HALP")
(cheatsheet-add :group 'magit
                :key "c c; [type message]; C-c C-c"
                :description "Commit staged changes; add commit msg; save commit msg and finish")
#+END_SRC
**** Projectile cheats
#+BEGIN_SRC emacs-lisp :noweb-ref projectile-cheats :tangle no
(cheatsheet-add :group 'projectile
                :key "C-c p s s"
                :description "search")
(cheatsheet-add :group 'projectile
                :key "C-c p r"
                :description "find-replace")
(cheatsheet-add :group 'projectile
                :key "C-c p f"
                :description "file-find")
(cheatsheet-add :group 'projectile
                :key "C-c p a"
                :description "switch to related file (e.g. header)")
(cheatsheet-add :group 'projectile
                :key "C-c p k"
                :description "kill all buffers for current project")
(cheatsheet-add :group 'projectile
                :key "C-c p <Shift>+s"
                :description "save all buffers for current project")
#+END_SRC
**** Built-in emacs help
[[http://stackoverflow.com/questions/965263/given-an-emacs-command-name-how-would-you-find-key-bindings-and-vice-versa][Source]]
#+BEGIN_SRC emacs-lisp :noweb-ref builtin-cheats :tangle yes
(cheatsheet-add :group 'builtin_help
                :key "C-h c [command-name]"
                :description "Look up the keybinding for a given command")
(cheatsheet-add :group 'builtin_help
                :key "C-h k [key-sequence]"
                :description "Look up the command for a given keybinding")
(cheatsheet-add :group 'builtin_help
                :key "C-h f [function-name]"
                :description "Look up the docs for a command")
(cheatsheet-add :group 'builtin_help
                :key "C-h ?"
                :description "Help for getting more help")
#+END_SRC
*** TODO use popwin to make it so that
**** the cheatsheet pops up in a sensible place, i.e. the cheatsheet does not occupy the adjacent buffer
**** closing the cheatsheet does not run "delete-window" (C-x 0) on the buffer that it occupied
*** TODO make this entire section less hideous. (Seriously, the [[*LaTeX%20cheats][LaTeX cheats]] section is p fugly)
*** NOTE: funky load behavior
It appears that the cheatsheet loads at startup time. Adding another
cheatsheet entry makes the entry pop up in the cheatsheet after
eval'ing my config, but deleting a cheatsheet entry does not update
the display until you restart Emacs.
*** TODO add the following cheats to cheatsheet
**** Copy-paste from helm / minibuffer!!! https://groups.google.com/forum/#!topic/emacs-helm/AYrrKO7E53I
** Yasnippet
*** [[https://github.com/joaotavora/yasnippet/blob/master/README.mdown][Github]]
*** [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][Cup Full of Code tutorial (example starter snippets)]]
*** [[https://joaotavora.github.io/yasnippet/snippet-organization.html#sec-1][Joatoavora tutorial (better)]]
*** Configuration
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading yasnippet...")
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (yas-global-mode 1)
  :bind
  ("H-y" . yas-insert-snippet))
#+END_SRC
** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-P" . ace-window)))
#+END_SRC
** Ace Jump
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
  :bind ("M-J" . ace-jump-mode))
#+END_SRC
** Shackle
https://github.com/wasamasa/shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle 
  :config
  (setq shackle-default-alignment 'below)
  (setq shackle-default-size 0.33)
  (setq shackle-default-rule '(:select t :popup t :same nil))
  ;; <<org-src-shackle-config>>
  (shackle-mode 1))
#+END_SRC
** Undo tree
Docs: <http://www.dr-qubit.org/undo-tree/undo-tree-0.6.4.el>
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading undo-tree...")
(require 'undo-tree)
(setq undo-tree-auto-save-history t)
(add-to-list 'undo-tree-history-directory-alist
             '("." . "~/.emacs.d/cache/undo/"))

;; WARNING!!! This line must appear /after/ setting variables to save undo-tree
;; history!!!
(global-undo-tree-mode)
#+END_SRC
** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode)
  :diminish)
;; Permanently enable syntax checking
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC
*** Usage
via http://www.flycheck.org/en/latest/user/quickstart.html#enable-
- =C-c ! n=: go forward to next error
- =C-c ! p=: go backward to prev. error
- =C-c ! l=: show a popup list of errors
** Transpose-frame
Provides 
- flip-frame
- transpose-frame
- flop-frame
#+BEGIN_SRC emacs-lisp
(use-package transpose-frame)
#+END_SRC
** Smartparens
This config is adapted from Spruce Bondera's .emacs.d
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :config
  ;; Enable the default config
  (require 'smartparens-config)

  ;; There's several modes in which I usually prefer strings to be treated
  ;; similar to s-expressions. In others its less relevant/string literals are
  ;; less common.
  ;;(setq sp-navigate-consider-stringlike-sexp
  ;;      (append sp-navigate-consider-stringlike-sexp (list 'python-mode
  ;;                                                         'org-mode
  ;;                                                         'coffeescript-mode)))

  ;; This overlay ended up being on basically all the time and overriding my
  ;; syntax highlighting. More distracting than helpful.

  ;; From the docs:
  ;; If non-nil, autoinserted pairs are highlighted while point is inside the pair.
  (setq sp-highlight-pair-overlay nil)

  ;; smartparens will automatically escape quotes, so if you type this:
  ;;     "The expression of the day is My Expression!"
  ;;
  ;; and then try to highlight and quote "My Expression!", you'll get this:
  ;;     "The expression of the day is \"My Expression!\""
  ;;
  ;; I don't like that. This line turns it off.
  (setq sp-escape-quotes-after-insert nil)

  ;; https://smartparens.readthedocs.io/en/latest/pair-management.html
  (sp-pair "$" "$")   ;; latex inline math mode. Pairs can have same opening and closing string

  :bind (("C-M-f" . sp-forward-sexp)
         ("C-M-b" . sp-backward-sexp)
         ("C-M-u" . sp-backward-up-sexp)
         ("C-M-d" . sp-down-sexp)
         ("C-M-a" . sp-backward-down-sexp)
         ("C-M-e" . sp-forward-up-sexp)
         ("C-M-n" . sp-beginning-of-next-sexp)
         ("C-M-p" . sp-beginning-of-previous-sexp)
         ;; Unwrap, or remove the parens/outer pair from the current s-exp
         ("C-M-<backspace>" . sp-unwrap-sexp)))

;; Enable smartparens globally
(smartparens-global-mode)
#+END_SRC
** Multi-web mode
#+BEGIN_SRC emacs-lisp
(use-package multi-web-mode
  :config
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (multi-web-global-mode 1))
#+END_SRC
** Dumb-jump
- Keybindings: 
  - C-M-g : dumb-jump go
  - C-M-p : dumb-jump prev.
  - C-M-q : dumb-jump quick look
Visual studio has a "Go to definition" option in the context menu. It's nice. Gimme!
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :config
  (dumb-jump-mode 1)
  ;; (setq dumb-jump-selector 'helm)
  (setq dumb-jump-prefer-searcher 'rg))
#+END_SRC
** Hide-show mode
- Keybindings: https://www.emacswiki.org/emacs/HideShow
- hs == short for hide-show
#+BEGIN_SRC emacs-lisp
;; (hs-minor-mode)
(load-library "hideshow")
(global-set-key (kbd "C--") 'hs-toggle-hiding)
(global-set-key (kbd "C-M--") 'hs-hide-all)
(global-set-key (kbd "C-M-=") 'hs-show-all)
(add-hook 'c-mode-common-hook   'hs-minor-mode)
#+END_SRC
* Programming
** Whitespace preferences
#+BEGIN_SRC emacs-lisp
;; Show trailing whitespace by default
(message "[krista] Loading whitespace preferences...")
(use-package whitespace)
(setq-default show-trailing-whitespace nil)
                                        ;(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; ... but don't show trailing whitespace if I'm in
;; - a minibuffer
;; - help mode
;; - in a makefile
(defun hide-trailing-whitespace ()
  (setq show-trailing-whitespace nil))
(add-hook 'minibuffer-setup-hook
          'hide-trailing-whitespace)
(add-hook 'help-mode-hook
          'hide-trailing-whitespace)
(add-hook 'compilation-mode-hook
          'hide-trailing-whitespace)
(add-hook 'makefile-mode-hook
          'hide-trailing-whitespace)
(add-hook 'text-mode-hook
          'hide-trailing-whitespace)
;; Function hide-trailing-whitespace is adapted from
;; the function no-trailing-whitespace, available:
;; https://ogbe.net/emacsconfig.html

(add-hook 'python-mode-hook 'whitespace-mode)
(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab lines))
(setq whitespace-action '(auto-cleanup))
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq-default fill-column 80)
                                        ;(defvaralias 'c-basic-offset 'tab-width)
#+END_SRC
** Programming languages
*** C / C++
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading cc-mode...")
(use-package cc-mode
  :bind (:map
         c-mode-base-map
         ("C-c b" . compile)
         ("M-j" . join-line)))

(use-package cpputils-cmake
  :config
  (add-hook 'c-mode-common-hook
            (lambda ()
              (if (derived-mode-p 'c-mode 'c++-mode)
                  (cppcm-reload-all))))
  )

;; (use-package cmake-ide
;;   :config
;;   (use-package rtags) ;; optional, must have rtags installed
;;   (cmake-ide-setup)
;;   )

;; My wildly unpopular bracing style
;; Secret: I really use Ratliffe, but this does the trick
;; (setq krista-c-style
;;       '((setq c-default-style "whitesmith")
;;         (setq-default c-basic-offset 4)))
;; Alternate settings that don't piss other programmers off as much:
(setq conformity-c-style
      '((setq c-default-style "stroustrup")
        (setq-default c-basic-offset 2)
        (setq c-basic-offset 2)
        (setq-default python-indent 2)
        (setq python-indent 2)))

(add-hook 'c-mode-common-hook
          (lambda () (c-add-style "conformity-c-style" conformity-c-style t)))
(add-hook 'c++-mode-hook
          (lambda () (c-add-style "conformity-c-style" conformity-c-style t)))
(setq-default c-basic-offset 2)
(setq c-basic-offset 2)

(use-package modern-cpp-font-lock)
(add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)

;; (defface font-lock-operator-face
;;   '((((class color)
;;        :background "darkseagreen2")))
;;   "Basic face for highlighting."
;;   :group 'basic-faces)

;; ;; You'll have a hard time missing these colors
;; (set-face-foreground 'font-lock-operator-face "red")
;; (set-face-background 'font-lock-operator-face "blue")

;; (font-lock-add-keywords 'c++-mode
;;   '(("\\(~:^&\|!<>:=,.?\\+*/%-]\\)" 0 'font-lock-operator-face)))
#+END_SRC
*** Python
**** Pylint minor mode
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading python config...")
(autoload 'pylint "pylint")
(add-hook 'python-mode-hook 'pylint-add-menu-items)
(add-hook 'python-mode-hook 'pylint-add-key-bindings)
#+END_SRC
**** Python shell interpreter
- Problem: When I ran =run-python=, I got the following error message:
  - Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to
    support readline, yet ‘python-shell-completion-native’ was t and
    "python" is not part of the
    ‘python-shell-completion-native-disabled-interpreters’ list.
    Native completions have been disabled locally.
- Solution (via [[https://emacs.stackexchange.com/a/30970][this]]):
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
  #+END_SRC
**** Press <tab> to indent with 2 spaces
#+BEGIN_SRC emacs-lisp
(setq python-indent 2)
(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (setq tab-width 2)
            (setq python-indent 2)))
#+END_SRC
*** Slime (lisp)
#+BEGIN_SRC emacs-lisp
;; (load (expand-file-name "~/core/dev/builds_from_source/quicklisp/slime-helper.el"))
;; The SBCL binary and command-line arguments
;; (setq inferior-lisp-program "/usr/local/bin/sbcl --noinform")
#+END_SRC
*** haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode)
#+END_SRC
*** C#
#+BEGIN_SRC emacs-lisp
(use-package csharp-mode
:config
  (autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
  (setq auto-mode-alist
     (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))
  )


  (defun my-csharp-mode-fn ()
     "function that runs when csharp-mode is initialized for a buffer."
     (turn-on-auto-revert-mode)
     (setq indent-tabs-mode nil)
    (setq c-syntactic-indentation t)
    (c-set-style "ellemtel")
    (setq c-basic-offset 4)
    (setq truncate-lines t)
    (setq tab-width 4)
    (local-set-key (kbd "C-c C-c") 'recompile))
(add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)

(add-hook 'csharp-mode-hook 'omnisharp-mode)
(eval-after-load
    'company
  '(add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
* Getting help
This section is not part of my config file per say, but contains instructions
for getting help with various parts of emacs
** How-to's
*** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html][Keybinding instructions]]
*** How to edit source code in org-mode file
- New code block:
  - New source block (lang unspecified): <s [TAB]
  - New elisp block: <el [TAB]
- Edit code block: C-c'
*** Embed an image in an org document
#+BEGIN_EXAMPLE
,#+CAPTION: This is the caption for the next figure link (or table)
,#+attr_org: :width="50px"
,#+NAME:   figure
[[file:./my_image.png]]
#+END_EXAMPLE
*** Select all: C-x h
*** Moving a file into the 'literate' directory:
Suppose you made a file called =new-thing=
#+BEGIN_EXAMPLE 
;; Macro to define a new external tangling file:
(krista/new-config-file new-thing "new-thing")
;; Actually load the external file:
'(org-babel-load-file krista/my-new-config-file)
#+END_EXAMPLE
** Troubleshooting your config file
If you don't know why your emacs is breaking, but suspect a tangling
issue, then CHECK CONFIG.EL
** Helpful resources
*** Within emacs
- =M-x describe-[key, face, mode, etc.]=
  - =C-h [k, o, f, m]=: Quick keybindings for the describe-.* functions
- Custom help written by me: [[*Cheatsheet]]
*** Online
- http://pages.sachachua.com/.emacs.d/Sacha.html
- http://ergoemacs.org/emacs/emacs.html
- https://emacsdojo.github.io/
* Further plans
** TODO Gtd goals
https://github.com/jethrokuan/.emacs.d/blob/master/config.org#org-mode-for-gtd
** TODO Org context
https://github.com/thisirs/org-context
** TODO Kinesis-specific keyboard issues
- My hands were hurting after long typing sessions. As a computer
  science student, I forsaw this as being a potentially-huge problem
  later on in life. So I decided to get a Kinesis Advantage 2 while I
  was still young, springy, and stupid enough to consider adapting my
  muscle memory to a new keyboard style. (...but fuck Dvorak. I ain't
  crazy enough for Dvorak.) 2 weeks later, my new Kinesis arrived. I
  plugged her into my Mac, and with a perverse glee, I started up
  Emacs to see what was broken. Here, I shall document those things.
- First, I live in the U.S. This keyboard therefore shipped with a
  P.C. layout. I followed the instructions for "Mac Mode", as per
  the quickstart guide. It should be noted that before switching, my
  layout was modified from the stock OS X layout as follows:
- Global modifications:
** TODO Integrated compiler / version control / logging facility
- I've noticed that when coding in a compiled language such as C/C++,
  I often end up in this workflow:
  - Type some stuff
  - Save
  - Try compiling
  - If compiler errors
    - Make note of what's wrong
    - Try to solve the problem
    - Try compiling again
- It would be nice to be able to record the flow of [compiler error /
  troubleshooting idea / fix] for the purposes of version control
- I want a package that will let me have a debugging diary which will
  archive my code, compiler output, and any thoughts that i'd like to
  record.
- Ideally, the package would output an org doc with an undo-tree -like
  interface for retracing my steps in debugging
** TODO Set up steam integration with emacs
** TODO spotify controls in emacs
** TODO install & configure hackernews mode
** TODO Emacs/W3
#+BEGIN_SRC emacs-lisp
;; (setq load-path (cons "/usr/share/emacs/site-lisp" load-path))
;; (condition-case () (require 'w3-auto "w3-auto") (error nil))
#+END_SRC
** TODO multiple-cursors
#+BEGIN_SRC emacs-lisp
;; (use-package multiple-cursors
;;  :bind (("C-S-c C-S-c" . mc/edit-lines)))
#+END_SRC
** TODO Add more to yasnippet
** TODO Install the alert package
- provides Growl-like notifications
- would be useful for org-calendar
* heap
#+BEGIN_SRC emacs-lisp
(defun revert-buffer-no-prompt ()
  "Revert buffer without confirm prompt"
  (interactive)
  (revert-buffer t t))
(bind-key "H-R" #'revert-buffer-no-prompt)
#+END_SRC
