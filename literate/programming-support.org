* Table of Contents                                                     :TOC:
- [[#whitespace-preferences][Whitespace preferences]]
- [[#programming-languages][Programming languages]]
  - [[#c--c][C / C++]]
  - [[#python][Python]]
  - [[#slime-lisp][Slime (lisp)]]
  - [[#haskell][haskell]]
  - [[#c][C#]]
  - [[#javascript][Javascript]]
  - [[#xml][XML]]
  - [[#golang][golang]]
- [[#dev-tools--containerization--friends][Dev tools / containerization & friends]]
  - [[#kubernetes][Kubernetes]]
  - [[#docker][Docker]]
  - [[#hashicorp--packer--terraform][Hashicorp / Packer / Terraform]]
  - [[#jenkins][Jenkins]]
- [[#ansible][Ansible]]
- [[#yaml][Yaml]]
- [[#spellcheck-comments][Spellcheck comments]]
- [[#line-numbers----prog-mode-only][Line numbers -- prog-mode only]]
- [[#interactive-highlighting][Interactive highlighting]]
  - [[#highlight-indentation][highlight indentation]]
  - [[#highlight-symbol][Highlight symbol]]
  - [[#highlight-surrounding-paren][Highlight surrounding paren]]
  - [[#highlight-symbol-1][+highlight-symbol+]]
- [[#treemacs][treemacs]]
- [[#google-this-mode][google-this mode]]
- [[#cycle-inflection-snake_case-camelcase-kebob-case][cycle inflection (snake_case, camelCase, kebob-case)]]
- [[#behave-bdd-tests][Behave (BDD tests)]]
- [[#dotenv-mode][Dotenv mode]]
- [[#markdown][Markdown]]
- [[#jsonnet][jsonnet]]

* Whitespace preferences
#+BEGIN_SRC emacs-lisp
(message "[kris] Loading whitespace preferences...")
(setq tab-width 4)
;; (setq-default tab-width 4)
(setq indent-tabs-mode nil)

(use-package whitespace)

;; Show trailing whitespace by default
(setq-default show-trailing-whitespace t)

;; (add-hook 'before-save-hook 'delete-trailing-whitespace)
;; ... but don't show trailing whitespace if I'm in
;; - a minibuffer
;; - help mode
;; - in a makefile
(defun hide-trailing-whitespace () (setq show-trailing-whitespace nil))
(add-hook 'minibuffer-setup-hook 'hide-trailing-whitespace)
(add-hook 'help-mode-hook 'hide-trailing-whitespace)
(add-hook 'compilation-mode-hook 'hide-trailing-whitespace)
;; (add-hook 'makefile-mode-hook 'hide-trailing-whitespace)
(add-hook 'text-mode-hook 'hide-trailing-whitespace)
(add-hook 'org-mode-hook 'hide-trailing-whitespace)
(add-hook 'shell-mode-hook 'hide-trailing-whitespace)
(add-hook 'fundamental-mode-hook 'hide-trailing-whitespace)
;; Function hide-trailing-whitespace is adapted from
;; the function no-trailing-whitespace, available:
;; https://ogbe.net/emacsconfig.html

;; This is commented out because it automatically cleans up whitespace on save
;; This can be a pain when collaborating with other people, so I have it disabled by default
;; TODO: set up to auto-enable or disable based on number of collaborators

(setq whitespace-style '(trailing space-before-tab indentation empty space-after-tab lines))
(add-hook 'prog-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook '(lambda () (setq indent-tabs-mode nil)))
;; (setq whitespace-action '(auto-cleanup))
#+END_SRC

#+RESULTS:
| turn-on-diff-hl-mode | hs-minor-mode | highlight-indent-guides-mode | (lambda nil (setq indent-tabs-mode nil)) | whitespace-mode | flyspell-prog-mode | linum-mode |

* Programming languages
** C / C++
#+BEGIN_SRC emacs-lisp
(message "[kris] Loading cc-mode...")
(use-package cc-mode
  :defer t
  :config
  ;; This function matches any existing whitespace style that can be found
  ;; Source: Spruce Bondera's config
  (with-eval-after-load 'dtrt-indent
    (add-hook 'c-mode-common-hook
              (lambda () (dtrt-indent-mode t))))
  :bind (:map
         c-mode-base-map
         ("C-c b" . compile)
         ("M-j" . join-line)))

(use-package cpputils-cmake
  :defer t
  :config
  (add-hook 'c-mode-common-hook
            (lambda ()
              (if (derived-mode-p 'c-mode 'c++-mode)
                  (cppcm-reload-all)))))


(c-add-style "kris-style"             ; title
             '("python"                 ; inherit from the python style
               (indent-tabs-mode . nil) ; indents: use spaces, not tabs
               (c-basic-offset . 4)     ; indents: 4 chars wide
               (fill-column . 80)))     ; when to wrap line? (In chars)
(setq c-default-style "kris-style")

(use-package modern-cpp-font-lock   :defer t)
(add-hook 'c++-mode-hook #'modern-c++-font-lock-mode)

;; (defface font-lock-operator-face
;;   '((((class color)
;;        :background "darkseagreen2")))
;;   "Basic face for highlighting."
;;   :group 'basic-faces)

;; ;; You'll have a hard time missing these colors
;; (set-face-foreground 'font-lock-operator-face "red")
;; (set-face-background 'font-lock-operator-face "blue")

;; (font-lock-add-keywords 'c++-mode
;;   '(("\\(~:^&\|!<>:=,.?\\+*/%-]\\)" 0 'font-lock-operator-face)))
#+END_SRC
** Python
*** Blacken
#+BEGIN_SRC emacs-lisp
(message "[kris] Loading python config...")
(use-package blacken)
;; (add-hook 'python-mode-hook 'blacken-mode)
#+END_SRC
*** Python shell interpreter
- Problem: When I ran =run-python=, I got the following error message:
  - Warning (python): Your ‘python-shell-interpreter’ doesn’t seem to
    support readline, yet ‘python-shell-completion-native’ was t and
    "python" is not part of the
    ‘python-shell-completion-native-disabled-interpreters’ list.
    Native completions have been disabled locally.
- Solution (via [[https://emacs.stackexchange.com/a/30970][this]]):
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'python
    (defun python-shell-completion-native-try ()
      "Return non-nil if can trigger native completion."
      (let ((python-shell-completion-native-enable t)
            (python-shell-completion-native-output-timeout
             python-shell-completion-native-try-output-timeout))
        (python-shell-completion-native-get-completions
         (get-buffer-process (current-buffer))
         nil "_"))))
  #+END_SRC
*** Press <tab> to indent with n spaces
#+BEGIN_SRC emacs-lisp
(setq python-indent 4)
(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (setq tab-width 4)
            (setq python-indent 4)))
#+END_SRC
*** company-jedi
#+BEGIN_SRC emacs-lisp
;; (use-package company-jedi
;;   :config
;;   (autoload 'jedi:setup "jedi" nil t)
;;   (add-hook 'python-mode-hook 'jedi:setup)
;;   (add-to-list 'company-backends 'company-jedi)
;;   )
#+END_SRC
*** flycheck config with pyenv for python
#+BEGIN_SRC emacs-lisp
;; (setq flycheck-python-pylint-executable "/Users/kvictorsen/.pyenv/shims/python")
(setq flycheck-python-pylint-executable "/usr/local/bin/python3")
(setq flycheck-python-pycompile-executable "/usr/local/bin/python3")
#+END_SRC
** Slime (lisp)
 #+BEGIN_SRC emacs-lisp
;; Quicklisp install and this config from https://gist.github.com/jteneycke/7947353
;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;; (setq inferior-lisp-program "/usr/local/bin/sbcl")
;; (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
;; (add-hook 'slime-mode-hook #'rainbow-delimiters-mode)
#+END_SRC
** haskell
#+BEGIN_SRC emacs-lisp
(use-package haskell-mode :defer t)
#+END_SRC
** C#
#+BEGIN_SRC emacs-lisp
(use-package csharp-mode
  :defer t
  :config

  ;; TODO: try removing this. Spruce said that it's unnecessary -- should look into that
  (autoload 'csharp-mode "csharp-mode" "Major mode for editing C# code." t)
  (setq auto-mode-alist
        (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))

  :bind
  ("C-c C-c" . recompile))

;; Csharp mode Whitespace preferences
(c-add-style "kris-csharp-style"      ; title
             '("python"                 ; inherit from the python style
               (indent-tabs-mode . nil) ; indents: use spaces, not tabs
               (c-basic-offset . 4)     ; indents: 4 chars wide
               (fill-column . 80)))     ; when to wrap line? (In chars)

(add-hook 'csharp-mode-hook (lambda () (c-set-style "kris-csharp-style")))
;; TODO: Set default csharp style
;; (add-hook  'csharp-mode-hook 'my-csharp-mode t)

(add-hook 'csharp-mode-hook 'omnisharp-mode)
(eval-after-load 'company
  '(add-to-list 'company-backends 'company-omnisharp))
#+END_SRC
*** Scala
    #+BEGIN_SRC emacs-lisp
      ;; (use-package scala-mode
      ;;   :interpreter
      ;;   ("scala" . scala-mode))
      ;; (use-package ensime
      ;;   :config
      ;;   ;; (add-hook 'scala-mode-hook 'ensime-scala-mode-hook
      ;;   ;;           (lambda () (ensime-mode)))
      ;;   )
    #+END_SRC
** Javascript
*** Plan
**** see https://github.com/eastwood/config/blob/master/emacs.d/init.el
**** figure out
typescript (executable: tsc)
eslint
tslint
yarn
npm global vs. project packages
***** node: installed by visiting https://nodejs.org/en/
TIDE requires: "Install node.js v0.12.0 or greater."
*** config
#+BEGIN_SRC emacs-lisp
;; js2-mode
(use-package js2-mode
  :config
  (setq-default js2-basic-offset 2)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))

  ;; Better imenu
  (add-hook 'js2-mode-hook #'js2-imenu-extras-mode)
  )

;; js2-refactor
(use-package js2-refactor)


;; xref-js2
(use-package xref-js2)

(use-package typescript-mode
  :config
  (setq auto-mode-alist
        (append '(("\\.ts$" . typescript-mode)
                  ("\\.tsx$" . typescript-mode)) auto-mode-alist)))

;; Source: https://github.com/eastwood/config/blob/master/emacs.d/init.el
(defun setup-tide-mode ()
  "Set up tide mode."
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (company-mode +1))

;; (use-package eglot
;;   :config
;;   (add-hook 'js2-mode-hook 'eglot-ensure)
;;   (add-hook 'typescript-mode-hook 'eglot-ensure))

;; Specifically for typescript as lsp mode isn't working well
(use-package tide
  :hook (typescript-mode . setup-tide-mode))


(defun kris/js-common ()
  (setq indent-tabs-mode nil)
  (setq tab-width 4)
  (setq js-indent-level 4))
(add-hook 'javascript-mode-hook 'kris/js-common)
(add-hook 'typescript-mode-hook 'kris/js-common)
(add-hook 'js2-mode-hook 'kris/js-common)


;; Set compile command to "node"

(defun kris/set-js-compile-command ()
  (set (make-local-variable 'compile-command)
       (concat "node "
	       (if buffer-file-name
		   (shell-quote-argument
		    (file-name-sans-extension buffer-file-name))))))
(add-hook 'javascript-mode-hook 'kris/set-js-compile-command)

#+END_SRC

#+RESULTS:
| kris/set-js-compile-command | kris/js-common |
** XML
#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (append '(("\\.bml$" . xml-mode)) auto-mode-alist))
#+END_SRC
** golang
Suggested go imports:
#+BEGIN_SRC bash 
go get golang.org/x/tools/cmd/godoc
go get github.com/rogpeppe/godef
go get golang.org/x/tools/cmd/goimports
#+END_SRC
Emacs config
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :config
  (defun set-exec-path-from-shell-PATH ()
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$"
                            ""
                            (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq eshell-path-env path-from-shell) ; for eshell users
      (setq exec-path (split-string path-from-shell path-separator))))

  (when window-system (set-exec-path-from-shell-PATH)))

(use-package go-mode
  :config
  ;; (add-hook 'before-save-hook 'gofmt-before-save)
  ;; Prefer goimports to gofmt if installed
  (let ((goimports (executable-find "goimports")))
    (when goimports
      (setq gofmt-command goimports)))

  ;; gofmt on save
  ;; (add-hook 'go-mode-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook '(lambda () (setq indent-tabs-mode t)))

  ;; CamelCase aware editing operations
  (subword-mode +1)

  ;; Set tab-width to 4
  (setq default-tab-width 4)
  (setq tab-width 4)
  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80))
  (setq indent-tabs-mode t)

  ;; Source: https://jamiecollinson.com/blog/my-emacs-config/#golang
  (defun jc/go-guru-set-current-package-as-main ()
    "GoGuru requires the scope to be set to a go package which
     contains a main, this function will make the current package the
     active go guru scope, assuming it contains a main"
    (interactive)
    (let* ((filename (buffer-file-name))
           (gopath-src-path (concat (file-name-as-directory (go-guess-gopath)) "src"))
           (relative-package-path (directory-file-name (file-name-directory (file-relative-name filename gopath-src-path)))))
      (setq go-guru-scope relative-package-path)))

  ;; Workaround for this error:
  ;; Suspicious state from syntax checker go-vet: Flycheck checker
  ;; go-vet returned non-zero exit code 1, but its output contained no
  ;; errors: package command-line-arguments (test)
  ;; 	imports gotest.tools/assert: cannot find package "gotest.tools/assert" in any of:
  ;; 	/usr/local/opt/go/libexec/src/gotest.tools/assert (from $GOROOT)
  ;; 	/Users/kvictorsen/go/src/src/gotest.tools/assert (from $GOPATH)
  ;; Try installing a more recent version of go-vet, and please open a
  ;; bug report if the issue persists in the latest release. Thanks!
  ;;
  ;; Source: https://github.com/flycheck/flycheck/issues/1523#issuecomment-469402280
  (let ((govet (flycheck-checker-get 'go-vet 'command)))
    (when (equal (cadr govet) "tool")
      (setf (cdr govet) (cddr govet))))
  :bind
  ("C-c M-d" . godoc-at-point)
  )

(setenv "GOROOT" "/usr/local/opt/go/libexec")
(setenv "GOPATH" "/Users/kvictorsen/go/src")
(add-to-list 'exec-path "/Users/kvictorsen/go/src")

(use-package company-go
  :config
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-go)))
(use-package go-imenu
  :config
  (go-imenu-setup))
(use-package go-gopath)
(use-package golint
  :config (add-to-list 'load-path (concat (getenv "GOPATH")  "/src/github.com/golang/lint/misc/emacs")))

(use-package go-projectile)

;; org babel functions for go
(use-package ob-go)

(use-package go-imports ;; add import statement for the package at point
  :bind
  ("C-c I" . go-imports-insert-import)
  ("C-c R" . go-imports-reload-packages-list)
  )

;; Keybinding to auto-add `json:' tags to go structs
(use-package go-add-tags)
(use-package go-guru
  :config
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode))

(use-package go-eldoc
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))
#+END_SRC
* Dev tools / containerization & friends
** Kubernetes
https://github.com/chrisbarrett/kubernetes-el
#+BEGIN_SRC emacs-lisp
(use-package kubernetes
  :ensure t
  :commands 
  (kubernetes-overview)
  :bind
  ("C-c k" . kubernetes-overview))
(use-package k8s-mode
 :ensure t
 :config
 (setq k8s-search-documentation-browser-function 'browse-url-firefox)
 :hook (k8s-mode . yas-minor-mode)
)
#+END_SRC
** Docker
https://github.com/Silex/docker.el
#+BEGIN_SRC emacs-lisp
;; (use-package docker-tramp :ensure t)

(use-package docker
  :ensure t
  :bind ("C-c d" . docker)
  :custom (docker-image-run-arguments '("-i" "-t" "--rm")))

(use-package dockerfile-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  (setq tab-width 4)
  ;; (put 'dockerfile-image-name 'safe-local-variable #'stringp)
  )

;; (use-package docker-compose-mode :ensure t)
#+END_SRC
** Hashicorp / Packer / Terraform
#+BEGIN_SRC emacs-lisp
(use-package terraform-mode
  :config
  ;; (when (executable-find "terraform")
  ;;   ;; (add-hook
  ;;   ;;  'terraform-mode-hook
  ;;   ;;  #'terraform-format-on-save-mode)
  ;;   )

  (use-package company-terraform
    :config
    (add-to-list 'company-backends 'company-terraform)
    )

  ;; Treat .tpl as .sh
  (setq auto-mode-alist
        (append '(("\\.tpl$" . sh-mode)) auto-mode-alist))
  )
#+END_SRC
** Jenkins
#+BEGIN_SRC emacs-lisp
(use-package groovy-mode
  :config
  (add-to-list 'auto-mode-alist '("Jenkinsfile\\'" . groovy-mode))
  (setq groovy-indent-offset 2)
  (setq indent-tabs-mode nil)
  ;; This function matches any existing whitespace style that can be found
  ;; Source: Spruce Bondera's config
  ;; (with-eval-after-load 'dtrt-indent
  ;;   (add-hook 'groovy-mode-hook
  ;;             (lambda () (dtrt-indent-mode t))))
  ;; (c-add-style "groovy-style"             ; title
  ;;              '("python"                 ; inherit from the python style
  ;; 		 (indent-tabs-mode . nil) ; indents: use spaces, not tabs
  ;; 		 (c-basic-offset . 2)     ; indents: 4 chars wide
  ;; 		 (fill-column . 80)))     ; when to wrap line? (In chars)
  ;; (setq c-default-style "groovy-style")
  )
(use-package jenkinsfile-mode)
#+END_SRC

* Ansible
#+BEGIN_SRC emacs-lisp
(use-package ansible
  :ensure t
  :defer t)
(use-package company-ansible
  :ensure t
  :defer t
  :config
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-ansible)))

;; ansible-doc adds the kbd: C-c ?  ansible-doc
(use-package ansible-doc
  :ensure t
  :defer t)
(defun kris/ansible ()
  "Set everything up for ansible development"
  (interactive)
  (ansible 1)
  (ansible-doc-mode 1)
  )
;; (add-hook 'yaml-mode-hook #'ansible-doc-mode)
#+END_SRC
* Yaml
#+BEGIN_SRC emacs-lisp
;; (bind-key "C-c $" #'fold-dwim-toggle-selective-display)
(setq auto-mode-alist
  (append '(("\\.template$" . yaml-mode)) auto-mode-alist))
;; Requires yamllint to be installed locally!
(use-package flycheck-yamllint
  :ensure t
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

(use-package yaml-mode
  :ensure t
  :mode (".yaml$")
  :hook
  (yaml-mode . yaml-mode-outline-hook)

  :init
  (defun yaml-outline-level ()
    "Return the outline level based on the indentation, hardcoded at 2 spaces."
    (s-count-matches "[ ]\\{2\\}" (match-string 0)))

  (defun yaml-mode-outline-hook ()
    (outline-minor-mode)
    (highlight-indent-guides-mode)
    (setq outline-regexp "^\\([ ]\\{2\\}\\)*\\([-] \\)?\\([\"][^\"]*[\"]\\|[a-zA-Z0-9_-]*\\): *\\([>|]\\|&[a-zA-Z0-9_-]*\\)?$")
    (setq outline-level 'yaml-outline-level))

  )
;; Code folding that works with yaml:
;; C-<return> to toggle element
(use-package yafolding)
(add-hook 'yaml-mode-hook
          (lambda () (yafolding-mode)))
#+END_SRC
* Spellcheck comments
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode 1)
#+END_SRC
* Line numbers -- prog-mode only
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode 1)
(setq fill-column 100)
#+END_SRC
* Interactive highlighting
** highlight indentation
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :config
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
  (setq highlight-indent-guides-responsive 'stack)
  (setq higlight-indent-guides-delay 0))
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
#+END_SRC
** Highlight symbol
Reccomendation from: https://emacs.stackexchange.com/a/19864
#+BEGIN_EXAMPLE 
Another way is to use library Highlight (highlight.el), commands hlt-highlight-symbol-at-point and hlt-unhighlight-symbol-at-point.
They are bound default to C-x X h s and C-x X u s, respectively. All of the highlighting and unhighlighting commands are bound on prefix key C-x X by default.
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(use-package highlight
  :config
  ;; highlight.el
  (setq hlt-auto-face-backgrounds
        '("#370E45" "#10184F" "#0E3738" "#104F16" "#474711" "#5C110E" "#52300C"))
  )
#+END_SRC
** Highlight surrounding paren
https://github.com/tsdh/highlight-parentheses.el
#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses)
#+END_SRC
** +highlight-symbol+
#+BEGIN_SRC emacs-lisp
;; (use-package highlight-symbol
;;   :bind
;;   ;; See https://stackoverflow.com/a/22440455
;;   ("<f8>" . highlight-symbol-nav-mode)
;;   ;; ("<f8> n" . highlight-symbol-next)
;;   ;; ("<f8> p" . highlight-symbol-prev)
;;   )
;; (add-hook 'prog-mode-hook #'highlight-symbol-mode)
;; ;; (global-set-key [(control f3)] 'highlight-symbol)
;; ;; (global-set-key [f3] 'highlight-symbol-next)
;; ;; (global-set-key [(shift f3)] 'highlight-symbol-prev)

;; (use-package auto-highlight-symbol
;;   :config
;;   (global-auto-highlight-symbol-mode t))
#+END_SRC
* treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :config 
  (treemacs-resize-icons 18)
  :bind
  ("C-c T" . treemacs)
  ("C-c t" . treemacs-select-window))
(use-package treemacs-magit)
(use-package treemacs-projectile)
#+END_SRC
* google-this mode
https://github.com/Malabarba/emacs-google-this
{Prefix} + ?? does ??:
- e :: error from compilation buffer
- r :: cppreference
- w :: word
- s :: symbol
- l :: line
- <SPACE> :: region
#+BEGIN_SRC emacs-lisp
(use-package google-this
  :config
  (google-this-mode 1))
#+END_SRC
* cycle inflection (snake_case, camelCase, kebob-case)
#+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :ensure t
  :bind (
         ("C-c q" . string-inflection-cycle)
         ("C-c C-q <SPC>" . string-inflection-underscore)
         ("C-c C-q -" . string-inflection-kebab-case)
         ("C-c C-q _" . string-inflection-upcase)
         ("C-c C-q c" . string-inflection-camelcase)
         ("C-c C-q p" . string-inflection-pascal-case)
         ))
#+END_SRC
* Behave (BDD tests)
Behave IDE
#+BEGIN_SRC emacs-lisp
(use-package feature-mode)
#+END_SRC

Syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package pickle)
#+END_SRC
* Dotenv mode
#+BEGIN_SRC emacs-lisp
(use-package dotenv-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.env\\..*\\'" . dotenv-mode)))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
(setq-default markdown-hide-markup nil)

;; (use-package markdown-mode :ensure t
;;   :init
;;   (setq-default markdown-hide-markup t))

(use-package markdown-toc
  :hook markdown-mode)
#+END_SRC
* jsonnet
https://github.com/google/jsonnet
#+begin_src emacs-lisp
(use-package jsonnet-mode)
#+end_src
