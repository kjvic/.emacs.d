#+TITLE: Krista's mode-line config
* Mode line format
** How to display the battery
See docs for the symbol battery-mode-line-format
#+BEGIN_SRC emacs-lisp
(setq battery-mode-line-format "%p%%")
#+END_SRC
** Mode line format
#+BEGIN_SRC emacs-lisp
;; https://emacs.stackexchange.com/a/16660
(defun mode-line-align (left center right &optional lpad rpad)
  "Return a string the width of the current window with
            LEFT, CENTER, and RIGHT spaced out accordingly, LPAD and RPAD,
            can be used to add a number of spaces to the front and back of the string."
  (condition-case err
      (let* ((left (if lpad (concat (make-string lpad ?\s) left) left))
             (right (if rpad (concat right (make-string rpad ?\s)) right))
             (width (apply '+ (window-width)
                           (let ((m (window-margins)))
                             (list (or (car m) 0) (or (cdr m) 0)))))
             (total-length (+ (length left) (length center) (length right) 2)))
        (when (> total-length width) (setq left "" right ""))
        (let ((left-space (/ (- width (length center)) 2))
              (make-result #'(lambda (lspaces rspaces)
                               (concat left (make-string lspaces ?\s)
                                       center
                                       (make-string rspaces ?\s)
                                       right))))
          (if (> (length left) left-space)
              (let* ((center-space (+ (- width total-length) 2))
                     (lspaces (max (/ center-space 2) 1))
                     (rspaces (max (- center-space lspaces) 1)))
                (funcall make-result lspaces rspaces))
            (let* ((right-space (- width left-space (length center)))
                   (lspaces (max (- left-space (length left)) 1))
                   (rspaces (max (- right-space (length right)) 1 0)))
              (funcall make-result lspaces rspaces)))))
    (error (format "[%s]: (%s) (%s) (%s)" err left center right))))

;; Strings which display the buffer's modified status 
;; 
;; Some advice: make these the same length, so the name of your buffer
;;              won't jump when you modify its contents!

;; See also: https://gist.github.com/lateau/4511988
;; (setq krista-buffer-modified-string "Δ △")
(setq krista-buffer-modified-string "≠") ; ≇ ≠
(setq krista-buffer-readonly-string "≝") ; ≝, ↯, ≔, ⟂, ∅, , ※
(setq krista-buffer-unchanged-string "=") ; ≅ =

(defun krista-get-buffer-modified-status() 
  ;; What to display if the buffer is read-only
  '(:eval
    (if buffer-read-only
        '((:eval (propertize krista-buffer-readonly-string
                             'face 'font-lock-keyword-face)))
      ;; What to display if the buffer has been modified since the
      ;; last save
      (if (buffer-modified-p)
          '((:eval (propertize krista-buffer-modified-string
                               'face 'font-lock-warning-face)
                   (set-face-attribute 'krista-buffer-modified-string nil
                                       :width "expanded")))
        ;; What to display if the buffer is not read-only, but also
        ;; hasn't been modified
        '(:eval (propertize krista-buffer-unchanged-string
                            'face 'font-lock-comment-face))))))

(setq krista/buffer-modified-status-help-echo
      (concat "Buffer modified status:\n"
	      "Readonly: " krista-buffer-readonly-string "\n"
	      "Modified: " krista-buffer-modified-string "\n"
	      "Unchanged: " krista-buffer-unchanged-string))
;; To customize the mode line, make a list of all of the things that
;; should be displayed (listed in order from left to right)
;; See also: https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html#Mode-Line-Format
(defvar krista-modeline-format
  (list

   ;; Leading space so you don't run into the end of the mode line
   mode-line-front-space

   ;; Display buffer's local modified status
   ;; --------------------------------
   '(:eval
      (if buffer-read-only
          '((:eval (propertize krista-buffer-readonly-string
                               'face 'font-lock-doc-face
			       'mouse-face 'mode-line-highlight
			       'help-echo 'krista/buffer-modified-status-help-echo)))
	;; What to display if the buffer has been modified since the
	;; last save
	(if (buffer-modified-p)
            '((:eval (propertize krista-buffer-modified-string
                                 'face 'font-lock-warning-face
				 'mouse-face 'mode-line-highlight
				 'help-echo 'krista/buffer-modified-status-help-echo)))
          ;; What to display if the buffer is not read-only, but also
          ;; hasn't been modified
          '(:eval (propertize krista-buffer-unchanged-string
                              'face 'font-lock-comment-face
			      'mouse-face 'mode-line-highlight
			      'help-echo 'krista/buffer-modified-status-help-echo)))))

   ;; Padding
   " "
   ;; Version control string
   '(:eval (propertize (if (stringp vc-mode) vc-mode
                         (format "%-12s" "\ ")) ; Default case (no version control)
                       'face 'font-lock-builtin-face))

   ;; Buffer/file name (just this file... not the whole path)
   '(:eval (propertize " %12b"
		       'help-echo (replace-regexp-in-string
				   "nil"
				   "This buffer is not file-backed"
				   (format "%s" (buffer-file-name)))
		       'mouse-face 'mode-line-highlight))
   ;; '(:eval (propertize " %12b" 'face '(:foreground "cyan")))

   " "

   ;; Show fixed-width (line, column)
   ;; WIP: a help tooltip equal to the file size
   ;; NOTE: file size should be displayed in in human-readable terms (e.g. 43k)
   '(:eval (propertize (concat "(" "L:%5l" "," "C:%3c" ")")
                       'face 'font-lock-comment-face
                       'help-echo "(Line, Column)"
                       'mouse-face 'mode-line-highlight))

   ;; " "
   ;; ;; Show percentage through buffer (WITHOUT showing the dumb "Top" or "Bot" string!)
   ;; '(:eval (propertize (concat (format "%-3d" (/ (point) 0.01 (point-max))) "%%")
   ;;                     'face 'font-lock-comment-face
   ;;                     'help-echo "Progress in buffer, expressed as a percentage"
   ;;                     'mouse-face 'mode-line-highlight))

   " "
   ;; Show name of the current major mode
   '(:eval (propertize mode-name
                       'face 'font-lock-builtin-face
                       'mouse-face 'mode-line-highlight
                       'help-echo "Major mode"))
   " "
   ;; Includes battery info from fancy-battery
   mode-line-misc-info
   " "
   ;; mode-line-end-spaces
   ))

(setq-default mode-line-format '(:eval krista-modeline-format))
#+END_SRC
** Remove the word "Git" from my version-control string
#+BEGIN_SRC emacs-lisp
  (defadvice vc-mode-line (after krista-strip-backend () activate)
    (when (stringp vc-mode)
        (let ((vc-no-backend
               ;; NOTE: these 2 formatting strings should be changed together
               ;; TODO: assign ^^^ to a variable, for a single point of maintenance
               ;; The %12s formatter makes the field 12 chars wide
               ;; Adding the `-' to make `%-12s' makes it so you pad on the right (i.e. left-justify)
               ;; See also: https://ftp.gnu.org/pub/old-gnu/Manuals/elisp-manual-20-2.5/html_chapter/elisp_5.html
               (format "%-12s" (replace-regexp-in-string "^ Git." ":" vc-mode))))
               (setq vc-mode vc-no-backend))))
#+END_SRC
* Time in the mode line(?)
#+BEGIN_SRC emacs-lisp
;; Source: https://emacs.stackexchange.com/a/20819
;; (setq display-time-string-forms
;;       '(12-hours ":" minutes am-pm))

;; Show the time in the modeline
(display-time-mode t)

;; (setq display-time-24hr-format nil)

;; Do show the date
(setq display-time-day-and-date t)
;; %l == hour, in 12-hour time
;; %M == minute
;; %p == AM/PM; %#p == am/pm
;; %a == abbreviated name of the day of week (e.g. Sat for Saturday)
;; %b == abbreviated name of the month (e.g. Aug for August)
;; %e == day of month (1-31)
;; %Z == name of time zone
;; (setq display-time-format " %l:%M%#p %a, %b.%e (%Z) ")
(setq display-time-format "%l:%M%#p %a, %b %e")
#+END_SRC
* Fancy battery mode
** TODO switch from fancy-battery-mode to an indicator
I want to see:
- fancy-battery-charging
  - yellow when level is != 100%
  - green when level is == 100%
- fancy-battery-discharging
  - yellow when level is != 100%
  - green when level is == 100%
- fancy-battery-critical
** Current config
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :diminish fancy-battery-mode
  :config
  ;; Turn on fancy battery display, turn off emacs default
  (fancy-battery-mode t)
  ;; Show a percentage instead of "remaining time to charge/discharge"
(setq fancy-battery-show-percentage t))

;; nil => Do not display load average in mode line
(setq display-time-default-load-average nil)
#+END_SRC
* Fonts and colors
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'mode-line-highlight nil
                      :background "#000d0f" 
                      :foreground "#75dbb7"
                      :inverse-video nil
                      :box nil
                      :family "Fira Code")
#+END_SRC
* Diminish!
Get the names of your minor-modes out of my mode line, dammit!
Source: http://emacs-fu.blogspot.com/2010/05/cleaning-up-mode-line.html
** Do not display the following modes
#+BEGIN_SRC emacs-lisp
  (when (require 'diminish nil 'noerror)
    (eval-after-load "auto-complete"
      '(diminish 'auto-complete-mode ""))
    (eval-after-load "undo-tree"
      '(diminish 'undo-tree-mode ""))
    (eval-after-load "Helm"
      '(diminish 'helm-mode ""))
    (diminish 'visual-line-mode "")
    (eval-after-load "projectile"
      '(diminish 'projectile-mode ""))
    (eval-after-load "DocView"
      '(diminish 'DocView-mode "PDF"))
    (diminish 'auto-revert-mode "")
    (diminish 'c++-mode "C++")
    )
#+END_SRC
* Helpful: unicode symbols to possibly use in modeline 
** Git status
  ;; TODO: color the Git logo based on the value of vc-state
  ;; Settings that I want:
  ;; Greyed out:
  ;; ‘unregistered’ - no vc 🤷
  ;; ‘ignored’ - 🚫
  ;; Bright yellow:
  ;; ‘conflict’ - =><= ⇒⇐
  ;; Normal:
  ;; ‘removed’ - 'rm'd' ⌫
  ;; ‘added’ - ✓
  ;; ‘edited’ - Δ
  ;; ‘up-to-date’ - 👌🆗
  ;; Oh noes!!!!
  ;; ‘needs-update’ - 🔂
  ;; ‘needs-merge’ - 🔂 needs update, but red
** for the git logo:
-  from reddit? Have not yet recovered source, although I might be
  able to find it somewhere in [[http://www.whiteboardcoder.com/2016/03/sbt-customize-shell-prompt-with-git.html][here]]
- ⎇ U+2387
- ʮ U+02AE
- ץ U+05E5
- Ⴤ U+10C4
- ป U+0E1B
- ሗ U+1217
- ሳ U+1233
- ኂ U+1282
- Ի U+053B
** To replace "TOP / BOT" in the position string
- ⤒ U+2912
- ⤓ U+2913
** For the battery
- ⚡ U+26A1
- ⏚ U+23DA
- ⎍ MONOSTABLE SYMBOL (U+238D)
- ⎓ DIRECT CURRENT SYMBOL FORM TWO (U+2393)
** Line endings indicator
- Mac: ⌘ PLACE OF INTEREST SIGN (U+2318)
- UNIX/LINUX: ⌗ VIEWDATA SQUARE (U+2317)
- Windows: ⊞ (U+229E) (in bold, italic)
  - № Numero sign (U+2116)
  - ⓦ Unicode number: U+24E6
  - ⧉ Unicode number: U+29C9
  - ⽥ - Unicode number: U+2F65
  - ㎳ - Square Ms Unicode number: U+33B3
  - 㘡 - Ideograph (same as 柙) a pen for wild beasts; a cage for prisoners CJK - Unicode number: U+3621
  - 🗔 - U+1F5D4 Desktop window
  - ⒨
  - ⒲
  - /⑃⑂/
  - ₩
  - Ｗ - Fullwidth Latin Capital Letter W - U+FF37
  - 𝕎 - Unicode number U+1D54E
* Echo area
Source: https://www.reddit.com/r/emacs/comments/67npjq/change_the_face_for_the_echo_area/
#+BEGIN_SRC emacs-lisp
(with-current-buffer " *Echo Area 0*" (face-remap-add-relative 'default '(:foreground "#77A4DE" :background "#23272e")))
(with-current-buffer " *Echo Area 1*" (face-remap-add-relative 'default '(:foreground "#77A4DE" :background "#23272e")))
#+END_SRC
* Make everything take effect
Finish up with this function
#+BEGIN_SRC emacs-lisp
(force-mode-line-update t)
#+END_SRC
