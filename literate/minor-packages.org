* Emacs achievements
- Unlock achievements to track your emacs journey
- [[https://bitbucket.org/gvol/emacs-achievements/src/5b4b7b6816aaf105cd493f51b3860bd2f0c014a6/README.md?at=default&fileviewer=file-view-default][Bitbucket]]
#+BEGIN_SRC emacs-lisp
(use-package achievements
  :diminish achievements-mode
  :config (achievements-mode t))
#+END_SRC
* bookmark+ (bmkp)
Note: use "P-F" to filter by file name
#+BEGIN_SRC emacs-lisp
(use-package bookmark+
  :defer t
  :config
  (setq bmkp-incremental-filter-delay 0.05))
#+END_SRC
* Benchmark init
- Figure out where you're burning time!!!
- [[https://www.emacswiki.org/emacs/BenchmarkInit][docs]]
- config
  #+BEGIN_SRC emacs-lisp
  (require 'benchmark-init)
  #+END_SRC
* paradox
Paradox is better package management
#+BEGIN_SRC emacs-lisp
;; Speedy-open melpa
(use-package paradox
  ;; :bind (("H-P" . paradox-list-packages))
  )
;; Set to t => Don't ask me to integrate with github every time I want to look
;; at melpa!
(with-eval-after-load 'paradox (setq paradox-github-token t))
#+END_SRC
* Yasnippet
** [[https://github.com/joaotavora/yasnippet/blob/master/README.mdown][Github]]
** [[http://cupfullofcode.com/blog/2013/02/26/snippet-expansion-with-yasnippet/index.html][Cup Full of Code tutorial (example starter snippets)]]
** [[https://joaotavora.github.io/yasnippet/snippet-organization.html#sec-1][Joatoavora tutorial (better)]]
** Configuration
#+BEGIN_SRC emacs-lisp
;; (message "[krista] Loading yasnippet...")
;; (use-package yasnippet
;;   :diminish yas-minor-mode
;;   :config
;;   (yas-global-mode 1)
;;   :bind
;;   ("H-y" . yas-insert-snippet))
#+END_SRC
* Hydra
Putting hydra after most config (for now) because I'm not sure how
best to structure hydra config
See also: https://github.com/abo-abo/hydra#the-one-with-the-least-amount-of-code
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :defer t
  :bind ("C-c f" . hydra-flycheck/body))

(defhydra hydra-flycheck (:color blue)
  "
  ^
  ^Flycheck^          ^Errors^            ^Checker^
  ^────────^──────────^──────^────────────^───────^─────
  _q_ quit            _<_ previous        _?_ describe
  _M_ manual          _>_ next            _d_ disable
  _v_ verify setup    _f_ check           _m_ mode
  ^^                  _l_ list            _s_ select
  ^^                  ^^                  ^^
  "
  ("q" nil)
  ("<" flycheck-previous-error :color pink)
  (">" flycheck-next-error :color pink)
  ("?" flycheck-describe-checker)
  ("M" flycheck-manual)
  ("d" flycheck-disable-checker)
  ("f" flycheck-buffer)
  ("l" flycheck-list-errors)
  ("m" flycheck-mode)
  ("s" flycheck-select-checker)
  ("v" flycheck-verify-setup))
#+END_SRC
* Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind
  ("M-P" . ace-window)
  :config
  (setq aw-dispatch-always t))
#+END_SRC
* Shackle
https://github.com/wasamasa/shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle 
  :config
  (setq shackle-default-alignment 'below)
  (setq shackle-default-rule
        '(:select t ; Select the popped-up window
          :popup t ; Pop up a new window instead of displaying the buffer in the current one.
          :same nil ; Display buffer in a NEW window.
          ;; :size 0.4 ; occupy 40% of the old window
          ))
  (setq shackle-rules
        '(("\\*Org Src.*"            :align right :select t   :popup t :same nil :regexp t :size 0.5)
          (" *Org todo*"             :align below :select t   :popup t :same nil)
          (" *Org tags*"             :align below :select t   :popup t :same nil)
          (" *Agenda Commands*"      :align below :select t   :popup t :same nil)
          ("*Org Note*"              :align below :select t   :popup t :same nil)
          ("CAPTURE.*"               :align below :select t   :popup t :same nil :regexp t)
          ("*Org Select*"            :align below :select t   :popup t :same nil)
          ;; (" *Org Links*"            :align below             :popup t :same nil :size 0.1)
          ;; ("*Select Link*"           :align below :select t   :popup t :same nil)
          ("*Org Clock*"             :align below :select t   :popup t :same nil)
          ("*Edit Formulas*"         :align below :select t   :popup t :same nil)
          ("*Org Attach*"            :align below :select t   :popup t :same nil)
          ("*Org Export Dispatcher*" :align below :select t   :popup t :same nil)
          ))


  ;; Make org-mode listen to shackle
  ;; Source: https://emacs.stackexchange.com/a/31634
  (setq org-src-window-setup 'other-window)
  ;;
  ;; Re-define org-switch-to-buffer-other-window to NOT use org-no-popups.
  ;; Primarily for compatibility with shackle.
  (defun org-switch-to-buffer-other-window (args)
    "Switch to buffer in a second window on the current frame.
    In particular, do not allow pop-up frames.
    Returns the newly created buffer.
    Redefined to allow pop-up windows."
    ;;  (org-no-popups
    ;;     (apply 'switch-to-buffer-other-window args)))
    (switch-to-buffer-other-window args)


    ;; Source: https://github.com/sk8ingdom/.emacs.d/blob/9d2f40c261864533df59be452117941a7f9b3e3f/general-config/general-plugins.el
    ;; Function to suppress delete-other-windows in functions
    (defun my/suppress-delete-other-windows (old-fun &rest args)
      (cl-flet ((silence (&rest args) (ignore)))
        (advice-add 'delete-other-windows :around #'silence)
        (unwind-protect
            (apply old-fun args)
          (advice-remove 'delete-other-windows #'silence))))
    ;;
    ;; Adds my/suppress-delete-other-windows to org-mode functions for compatibility with shackle
    (advice-add 'org-capture-place-template :around #'my/suppress-delete-other-windows)
    (advice-add 'org-agenda :around #'my/suppress-delete-other-windows)
    (advice-add 'org-add-log-note :around #'my/suppress-delete-other-windows)
    (advice-add 'org-todo :around #'my/suppress-delete-other-windows)
    (advice-add 'org-set-tags-command :around #'my/suppress-delete-other-windows)
    ;; (advice-add 'org-insert-link :around #'my/suppress-delete-other-windows)
    )

  ;; Enable shackle-mode globally
  (shackle-mode 1))
#+END_SRC
* Undo tree
Docs: <http://www.dr-qubit.org/undo-tree/undo-tree-0.6.4.el>
#+BEGIN_SRC emacs-lisp
(message "[krista] Loading undo-tree...")
(require 'undo-tree)
(setq undo-tree-auto-save-history t)
(add-to-list 'undo-tree-history-directory-alist
             '("." . "~/.emacs.d/cache/undo/"))

;; WARNING!!! This line must appear /after/ setting variables to save undo-tree
;; history!!!
(global-undo-tree-mode)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish
  :init (global-flycheck-mode)
  :custom
  (flycheck-display-errors-delay .75))
;; Permanently enable syntax checking
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'c++-mode-hook (lambda () (setq flycheck-gcc-language-standard "c++11")))
(add-hook 'c++-mode-hook (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC
** Usage
via http://www.flycheck.org/en/latest/user/quickstart.html#enable-
- =C-c ! n=: go forward to next error
- =C-c ! p=: go backward to prev. error
- =C-c ! l=: show a popup list of errors
* Transpose-frame
Provides 
- flip-frame
- transpose-frame
- flop-frame
#+BEGIN_SRC emacs-lisp
(use-package transpose-frame   :defer t)
#+END_SRC
* Smartparens
This config is adapted from Spruce Bondera's .emacs.d
#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer t
  :config
  ;; Enable the default config
  (require 'smartparens-config)

  ;; There's several modes in which I usually prefer strings to be treated
  ;; similar to s-expressions. In others its less relevant/string literals are
  ;; less common.
  ;;(setq sp-navigate-consider-stringlike-sexp
  ;;      (append sp-navigate-consider-stringlike-sexp (list 'python-mode
  ;;                                                         'org-mode
  ;;                                                         'coffeescript-mode)))

  ;; This overlay ended up being on basically all the time and overriding my
  ;; syntax highlighting. More distracting than helpful.

  ;; From the docs:
  ;; If non-nil, autoinserted pairs are highlighted while point is inside the pair.
  (setq sp-highlight-pair-overlay nil)

  ;; smartparens will automatically escape quotes, so if you type this:
  ;;     "The expression of the day is My Expression!"
  ;;
  ;; and then try to highlight and quote "My Expression!", you'll get this:
  ;;     "The expression of the day is \"My Expression!\""
  ;;
  ;; I don't like that. This line turns it off.
  (setq sp-escape-quotes-after-insert nil)

  ;; https://smartparens.readthedocs.io/en/latest/pair-management.html
  ;; (sp-pair "$" "$")   ;; latex inline math mode. Pairs can have same opening and closing string

  :bind (("C-M-f" . sp-forward-sexp)
         ("C-M-b" . sp-backward-sexp)
         ("C-M-u" . sp-backward-up-sexp)
         ("C-M-d" . sp-down-sexp)
         ("C-M-a" . sp-backward-down-sexp)
         ("C-M-e" . sp-forward-up-sexp)
         ("C-M-n" . sp-beginning-of-next-sexp)
         ("C-M-p" . sp-beginning-of-previous-sexp)
         ;; Unwrap, or remove the parens/outer pair from the current s-exp
         ("C-M-<backspace>" . sp-unwrap-sexp)))

;; Enable smartparens globally
(smartparens-global-mode)
#+END_SRC
* Multi-web mode
#+BEGIN_SRC emacs-lisp
(use-package multi-web-mode
  :defer t
  :config
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (multi-web-global-mode 1))
#+END_SRC
* Dumb-jump
- Keybindings: 
  - C-M-g : dumb-jump go
  - C-M-p : dumb-jump prev.
  - C-M-q : dumb-jump quick look
Visual studio has a "Go to definition" option in the context menu. It's nice. Gimme!
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :defer t
  :config
  (dumb-jump-mode 1)
  (setq dumb-jump-prefer-searcher 'rg))
#+END_SRC
* Hide-show mode
- Keybindings: https://www.emacswiki.org/emacs/HideShow
- hs == short for hide-show
#+BEGIN_SRC emacs-lisp
;; (hs-minor-mode)
(load-library "hideshow")
(global-set-key (kbd "C--") 'hs-toggle-hiding)
(global-set-key (kbd "C-M--") 'hs-hide-all)
(global-set-key (kbd "C-M-=") 'hs-show-all)
(add-hook 'c-mode-common-hook 'hs-minor-mode)
(add-hook 'cc-mode-hook 'hs-minor-mode)
(add-hook 'csharp-mode-hook 'hs-minor-mode)
#+END_SRC
* Rainbow-parens
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
(message "[krista] loading which-key...")
(use-package which-key              ;;; Display available keybindings in popup
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1.5))
(with-eval-after-load 'which-key
  (which-key-mode))
#+END_SRC
